function getConfigValue(a, b) {
	var c = G.config.raw.Conf;
	return getNodeValue(a, b, c)
}
function getLocalConfigValue(a, b) {
	var c = G.config.raw.LocalConf;
	return getNodeValue(a, b, c)
}
function getRcValue(a, b) {
	var c = G.rc.raw.Resource;
	return getNodeValue(a, b, c)
}
function getNodeValue(a, b, c) {
	if ("undefined" == typeof c) return b;
	for (var d = a.split("."), e = 0; e < d.length; e++)
		if (c = c[d[e]], "undefined" == typeof c || null === c) return b;
	return is.string(c) && is.numeric(c) && "number" == typeof b && (c = parseFloat(c)), c
}
function buildArray(a, b) {
	var c,
		d = [];
	return c = getNodeValue(a, [], b), is.array(c) ? d = c : d.push(c), d
}
function buildIpArray(a) {
	var b = "" == a ? "   " : b;
	return b = a.split(";"), b.forEach(function(a, c) {
			var d = a.split("~"),
				e = {};
			e.host_from = d[0], e.host_to = void 0 == d[1] ? 0 : d[1], b[c] = e
		}), b
}
function buildPortArray(a) {
	var b = "" == a ? "   " : b;
	return b = a.split(";"), b.forEach(function(a, c) {
			var d = a.split("~"),
				e = {};
			e.port_from = d[0], e.port_to = void 0 == d[1] ? d[0] : d[1], b[c] = e
		}), b
}
function onUnloadNotice() {
}
function buildMask(a) {
	G.serviceMask || (G.serviceMask = new XWindow({
		width : 160,
		model : !0,
		maskColor : "#F0F2F6",
		opacity : 50,
		elStyle : {
			border : "0px solid #9fb3c3",
			backgroundColor : "transparent"
		},
		contentStyle : {
			border : "0px solid #9fb3c3",
			backgroundColor : "transparent",
			color : "#fff",
			textAlign : "center"
		}
	}));var b = "zh_CN" !== window.language ? "Loading..." : "正在初始化...";
	a = a || b;var c = "<div style='background:url(\"/com/images/svrloading.gif\") no-repeat;width:32px;height:32px;margin:auto;cursor:wait'></div>";
	return G.serviceMask.setContent(c + "<span style='color:#282828;font-weight:bold;padding-top5px;'>" + a + "</span>"), G.serviceMask
}
function showLoginOtherPlaceTips(a, b, c) {
	var d = "<div class='head'>" + tr("提示信息") + "</div>        <div style='background: url(/com/images/pwd_change.png) no-repeat 20px 20px; padding:20px 20px 20px 90px; font-size:12px;line-height:22px;'>            <div style='background:transparent url(/com/images/x.gif) no-repeat left bottom;'>                <h2 style='margin:0px;padding:0px;font-size:14px;'>" + tr("登录提示") + "</h2>            </div>            <div style='width:310px;'>                <p>" + tr("此账号已经在其他地点登录") + "</p><p style='color:#666;'>" + tr("登录IP：") + a + "</p><p>" + tr("登录时间：") + formatDate(new Date(1e3 * b), "yyyy-MM-dd HH:mm:ss") + "</p>                <p></p>                <p>" + tr("可能的原因：") + "<br/>1." + tr("最近登录未注销；") + "<br/>2." + tr("账号正被其他人使用") + "</span></p>            </div>         </div>";
	G.win.login = G.win.login || new XNewWindow({
		content : d,
		width : 430,
		height : "auto",
		model : !0,
		closefn : function() {
			(c || new Function)()
		},
		buttons : [ {
			text : tr("确认"),
			handler : function(a) {
				a.hide(), (c || new Function)()
			}
		} ]
	}), G.win.login.show()
}
function initNewTemplate() {
	function a() {
		if ($ID("framework_c") && $ID("framework_c_l") && $ID("framework_c_r")) {
			$ID("framework_c").style.height = "auto", $ID("framework_c_l").style.height = "auto", $ID("framework_c_r").style.height = "auto";
			var a = windowHeight(),
				b = 82,
				c = $ID("framework_c_l").offsetHeight,
				d = $ID("framework_c_r").offsetHeight,
				e = a - b,
				f = c > e ? Math.max(c, d) : e,
				g = Math.max(c, d, e);
			is.iPad ? ($ID("framework_c").style.height = g + "px", $ID("framework_c_l").style.height = g + "px", $ID("framework_c_r").style.height = g + "px") : ($ID("framework_c").style.height = f + "px", $ID("framework_c_l").style.height = f + "px", $ID("framework_c_r").style.height = f + "px")
		}
	}
	window.tmlversion >= 5.35 && TipPanel.init(), window.tmlversion >= 5.35 && $ID("framework_c") && $ID("framework_c_l") && $ID("framework_c_r") && (addEvent(window, "resize", a), a(), window.customDisplayRcEnd = function(b, c) {
		c.childNodes.length > 0 && (c.lastChild.style.borderBottom = "1px solid #DDE6EC"), a()
	}, window.customDisplayRcGrpEnd = function(b, c) {
		c.childNodes.length > 0 && (c.firstChild.firstChild.className = "no_b_t"), a()
	}, addEvent($ID("rcsDisplayID"), "mouseover", function(a) {
		for (var b = a.target || a.srcElement, c = b, d = $ID("rcsDisplayID"), e = null, f = 0, g = 5; g >= f && c; f++) {
			if ("DL" === c.tagName) {
				e = c, c = null;break
			}
			c = c.parentNode
		}
		e && e.parentNode === d && (-1 !== e.className.indexOf("disable") ? e.className = e.className + " disable_dl_h" : e.className = e.className + " dl_h", stopEvent(a))
	}), addEvent($ID("rcsDisplayID"), "mouseout", function(a) {
		for (var b = a.target || a.srcElement, c = b, d = $ID("rcsDisplayID"), e = null, f = 0, g = 5; g >= f && c; f++) {
			if ("DL" === c.tagName) {
				e = c, c = null;break
			}
			c = c.parentNode
		}
		e && e.parentNode === d && (e.className = e.className.replace("disable_dl_h", "").replace("dl_h", "").replace("  ", " "), stopEvent(a))
	}))
}
function initInterfaceOnload() {
	$ID("button_bar") && ($ID("button_bar").style.display = "none"), $ID("toolbar") && ($ID("toolbar").style.display = "none")
}
function initLinkDisplay() {
	G.config.enableAutoLogin && $ID("autologinLink") && ($ID("autologinLink").style.display = "");var a = $ID("customer_list");
	a && "" != a.innerHTML && (a.style.display = "block")
}
function initAccEffectLink() {
	G.info.showAccEffectLink = (G.config.enableSCache || G.config.enableCsCompress) && is.Win();
	for (var a, b = document.getElementsByTagName("a"), c = 0; c < b.length; c++)
		if (b[c].href.indexOf("accEffect.csp") >= 0) {
			a = b[c], a.parentNode.style.display = G.info.showAccEffectLink ? "" : "none";break
	}
}
function initRcInterface() {
	if ("undefined" != typeof htmlBuilder) {
		var a = $ID("side"),
			b = $ID("main");
		a && b && a.offsetHeight > b.offsetHeight && (is.IE(6) ? b.style.height = a.offsetHeight + 30 + "px" : b.style.minHeight = a.offsetHeight + 30 + "px")
	}
}
function showMainInterface() {
	$ID("main") && ($ID("main").style.visibility = "visible")
}
function showLoggingOutMask() {
	G.mask.loggingOut || (G.mask.loggingOut = buildMask(tr("正在注销..."))), G.mask.loggingOut.show()
}
function showGoDefaultMask() {
	G.mask.defaultGoing || (G.mask.defaultGoing = buildMask(tr("默认资源跳转中..."))), G.mask.defaultGoing.show()
}
function hideGoDefaultMask() {
	return G.mask.defaultGoing ? void G.mask.defaultGoing.hide() : !1
}
function showLoadingMask() {
	G.mask.loading || (G.mask.loading = buildMask()), G.mask.loading.show()
}
function hideLoadingMask() {
	return G.mask.loading ? void G.mask.loading.hide() : !1
}
function showOpeningMask() {
	G.mask.opening || (G.mask.opening = buildMask(tr("正在打开资源..."))), G.mask.opening.show()
}
function hideOpeningMask() {
	return G.mask.opening ? void G.mask.opening.hide() : !1
}
function Logout() {
	var a = "<div class='head'>" + tr("注销") + "</div>        <div style='padding:20px 20px 20px 60px;line-height:30px;'>            <div style='width:200px;'>                <p style='font-size:14px;'>" + tr("是否确认注销？") + "</p>            </div>         </div>";
	G.win.logout = G.win.logout || new XNewWindow({
		width : 300,
		height : "auto",
		model : !0,
		maskColor : "#F0F2F6",
		elStyle : {
			border : "0px solid #9fb3c3",
			backgroundColor : "transparent"
		},
		contentStyle : {
			border : "0px solid #9fb3c3",
			backgroundColor : "transparent",
			color : "#fff",
			textAlign : "center"
		},
		content : a,
		buttons : [ {
			text : tr("确认"),
			handler : function(a) {
				a.hide(), delCookie("CLIPBOARD"), logout()
			}
		}, {
			text : tr("取消"),
			handler : function(a) {
				a.hide()
			}
		} ]
	}), G.win.logout.show()
}
function pageLogout() {
	"Anonymous" == G.info.loginName && G.config.denyNormalAccess ? window.location = fixUrl("../por/logout.csp?toClose=1") : window.location = fixUrl("../por/logout.csp")
}
function openSettings(a) {
	var b = a ? "svpnSetting.csp?autologin=1" : "svpnSetting.csp";
	window.__settingWin = window.__settingWin || new XNewWindow({
		url : b,
		width : 658,
		height : 458,
		model : !0
	}), window.__settingWin.show()
}
function IsCanUseSso() {
	return !(!is.IE() || -1 != navigator.appVersion.indexOf("Windows 9"))
}
function MakeSsoOK() {
	try {
		var a = "SSOClientPrj.Web2Client" + G.config.sslvpnNameFix + ".1";
		G.sso.obj = new ActiveXObject(a)
	} catch (b) {
		return G.sso.obj = null, !1
	} return !0
}
function ConfigSso() {
	function a(a) {
		return a = a.toUpperCase(), "HTTP" == a || "HTTPS" == a
	}
	if (null == G.sso.obj) return !1;
	G.sso.obj.SetLocaleInfo(G.info.msgSSOClientPrj), G.sso.obj.Login(), G.sso.obj.setUserInfo(G.sso.info.username, G.sso.raw.pwd), G.sso.obj.SetTimeout(1e3 * G.sso.config.ssotimeout);
	for (key in G.sso.data) {
		var b = getRcById(key);
		if (null != b && (a(b[G.RC_SVC]) || b.type == G.RC_WEB)) {
			var c = 0,
				d = b.attr;
			0 != (8 & d) && (c = 1), G.sso.obj.SetBsSSOConfig(G.sso.data[key].data, G.info.pageHref, b.type, c)
		}
	}
	return G.sso.obj.SetBsConfigEnd(), G.sso.obj.SetHandleInfo(), !0
}
function EnableSso(a) {
	return !!(IsCanUseSso() && MakeSsoOK() && ConfigSso())
}
function DisableSso() {
	try {
		if (null != G.sso.obj) G.sso.obj.StopSSO();else {
			var a = "SSOClientPrj.Web2Client" + G.config.sslvpnNameFix + ".1",
				b = CreateObject(a);
			b.StopSSO()
		}
		G.sso.config.enable = 0
	} catch (c) {}
}
function dealSSO() {
	1 == G.sso.config.enable && G.sso.data.length > 0 && (EnableSso() || DisableSso())
}
function displayBrowser() {
	for (var a = G.rc.web, b = 0, c = 0, d = a.length; d > c; c++) "-99" == a[c].id && 1 == a[c].authorization && (b = 1);
	0 == b ? $ID("brwDisplayID").style.display = "none" : $ID("brwDisplayID").style.display = "block"
}
function needShowUnauthRc() {
	return G.rc.unAuth.length > 0
}
function sf_handle_websvc(a, b, c, d) {
	2 == arguments.length && (c = b, b = a, a = 0);var e = window.location.hostname;
	if (G.rc.defaults.rcId == c && G.rc.defaults.rcId > 0) {
		var f = getRcById(G.rc.defaults.rcId);
		if (null == f) return;
		if (f = buildHostPro(f, a), "FTP" == f[G.RC_SVC]) return void HandleFtp(f.enable_disguise, f.host_from, f.port_from, !0);
		if ("MAIL" == f[G.RC_SVC]) return void HandleMail(f.enable_disguise, f.host_from, f.port_to, f.app_path, !0);
		if ("fileshare" == f[G.RC_SVC].toLowerCase()) return void HandleFileShare(c, d)
	}
	if (G.rc.easyLinkHash[c]) return void handEasyLinkHref(c, d);
	var g = new String(b);
	if ("" != g && "?" != g) {
		g = g.replace(/^\s+/g, "").replace(/\s+$/g, "").replace(/\\/g, "/"), g.match(/^(http:\/\/)|(https:\/\/)\s*/i) || (g = "http://" + g), g.match(/^https?:\/\/.+\//i) || (g.indexOf("?") >= 0 ? g = g.replace(/\?/, "/?") : g.indexOf("#") >= 0 ? g = g.replace(/#/, "/#") : g += "/");
		var f = getRcById(c);
		if (g = f && 1 == f.enable_disguise ? sf_trans_url(g, !0) : sf_trans_url(g), "" != g) {
			var h = "";
			if ((c > 0 || -1e3 > c) && "function" == typeof sf_handle_websso) {
				var i = 0;
				G.rc.defaults.rcId > 0 && d ? (h = "https://" + e + ("" == window.location.port ? "" : ":" + window.location.port) + "/" + getCookie("TWFID") + g, i = 1) : h = g;
				var j = sf_handle_websso(c, h, i);
				if (1 == j) return;
				0 != j && (g = j)
			}
			if (h = "https://" + e + ("" == window.location.port ? "" : ":" + window.location.port) + g, G.rc.defaults.rcId > 0 && d)
				if (setCookie("g_LoginPage", "0"), G.sso.obj)
					if (h = "https://" + e + ("" == window.location.port ? "" : ":" + window.location.port) + "/" + getCookie("TWFID") + g, G.sso.data.length > 0 && IsCanUseSSO(G.sso.data[c])) {
						h = "https://" + e + ("" == window.location.port ? "" : ":" + window.location.port) + "/com/defaultpage.htm?redirect=1&TWFID=" + getCookie("TWFID") + "&" + g;
						var k = "";
						void 0 != G.sso.data[c].mark && (k = G.sso.data[c].mark), G.sso.obj.CreateIEWithHandle(h, k), close()
					} else h = "https://" + e + ("" == window.location.port ? "" : ":" + window.location.port) + "/" + getCookie("TWFID") + g, window.location = h;
				else
					window.location = h;
			else try {
					if (G.sso.data.length > 0 && IsCanUseSSO(G.sso.data[c]))
						if (-1 != g.indexOf("?"))
							h = g + "&" + G.sso.obj.GetSSOLoginString;else {
							var k = "?";
							void 0 != G.sso.data[c].mark && (k = G.sso.data[c].mark), h = g + k + G.sso.obj.GetSSOLoginString
					}
					window.open(h)
				} catch (l) {}
		}
	}
}
function handEasyLinkHref(a, b) {
	var c = /^(((https?)|(ftp)):\/\/)?([^:\/]+)(:(\d+))?([^:]*)?$/i,
		d = getRcById(a);
	if (null != d) {
		var e = buildHostPro(d, 0),
			f = e.host_from,
			g = f.replace(c, "$8").replace(/&$/, "").replace(/\?$/, ""),
			h = G.rc.easyLinkHash[a],
			i = h.MapAddr,
			j = "";
		"" != g ? g = g.replace(/#.*$/i, function(a) {
			return j = a, ""
		}) : i = i.replace(/#.*$/i, function(a) {
			return j = a, ""
		}), i = i.trim().replace(/\/$/, "");
		var k = "",
			l = "";
		if ("0" != h.Mode) {
			"" != window.location.port && (i = i + ":" + window.location.port);
			var m = "sangfor_redirect=1";
			k = -1 != g.indexOf("?") ? "&" + m : "?" + m, l = "&sangfor_sessid=" + Base64.encode(getCookie("TWFID"))
		}
		var n = format("{0}{1}{2}{3}{4}", i, g, k, l, j);
		if ((a > 0 || -1e3 > a) && "function" == typeof sf_handle_websso) {
			var o = 0;
			G.rc.defaults.rcId > 0 && b && (o = 1);
			var p = sf_handle_websso(a, n, o);
			if (1 == p) return
		}
		var q;
		if (G.rc.defaults.rcId > 0 && b)
			if (setCookie("g_LoginPage", "0"), G.sso.obj) {
				var r = window.location.hostname;
				if (G.sso.data.length > 0 && IsCanUseSSO(G.sso.data[a])) {
					var q = "https://" + r + ("" == window.location.port ? "" : ":" + window.location.port) + "/com/defaultpage.htm?redirect=1&TWFID=" + getCookie("TWFID") + "&" + n;
					G.sso.obj.CreateIEWithHandle(q, ""), close()
				} else
					window.location = n
			} else
				window.location = n;
		else try {
				G.sso.data.length > 0 && IsCanUseSSO(G.sso.data[a]) && (n = -1 != tmpurl.indexOf("?") ? n + "&" + G.sso.obj.GetSSOLoginString : n + "?" + G.sso.obj.GetSSOLoginString), window.open(n)
			} catch (s) {}
	}
}
function sf_trans_url(a, b) {
	var c = "/web/",
		d = "1",
		e = new String(a);
	e = e.replace(/[\?#].*$/, ""), e.match(/\.css$/i) ? d = "2" : e.match(/\.js$/i) ? d = "3" : e.match(/\.vbs$/i) && (d = "4");var f = /(https?)(:\/\/)(.*)$/i,
		g = a.match(f);
	if (!g) return "";
	var h = g[3];
	b && (c = G.info.sfFakeURLFlag + c);var i = c + d + "/" + g[1] + "/0/" + h;
	return i
}
function HandleFtp(a, b, c, d, e) {
	a = 1 * a;var f = format("ftp.csp?ftphost={0}{1}&ftpport={2}", b, a ? "&safeurl=1" : "", c);
	f = "https://" + window.location.hostname + ("" == window.location.port ? "" : ":" + window.location.port) + "/por/" + f + "&TWFID=" + getCookie("TWFID");var g = f;
	try {
		G.sso.data.length > 0 && IsCanUseSSO(G.sso.data[e]) && (g = g + "?" + G.sso.obj.GetSSOLoginString)
	} catch (h) {} d && G.rc.defaults.rcId > 0 ? (setCookie("g_LoginPage", "0"), G.sso.obj && "undefined" != typeof e && G.sso.data.length > 0 && IsCanUseSSO(G.sso.data[e]) && null != G.sso.obj ? (G.sso.obj.CreateIEWithHandle(g, ""), close()) : window.location = g) : openNewWindow(g), delCookie("safeurl")
}
function HandleMail(a, b, c, d, e, f) {
	a = 1 * a;var g = format("mail.csp?smtphost={0}&imapport={1}&domain={2}{3}", b, c, d, a ? "&safeurl=1" : "");
	g = "https://" + window.location.hostname + ("" == window.location.port ? "" : ":" + window.location.port) + "/por/" + g + "&TWFID=" + getCookie("TWFID");var h = g;
	try {
		G.sso.data.length > 0 && IsCanUseSSO(G.sso.data[f]) && (h = h + "?" + G.sso.obj.GetSSOLoginString)
	} catch (i) {} e && G.rc.defaults.rcId > 0 ? (setCookie("g_LoginPage", "0"), G.sso.obj && "undefined" != typeof f && G.sso.data.length > 0 && IsCanUseSSO(G.sso.data[f]) ? (G.sso.obj.CreateIEWithHandle(h, ""), close()) : window.location = h) : openNewWindow(h), delCookie("safeurl")
}
function HandleFileShare(a, b) {
	var c,
		d = "/por/webfs.csp?rcid=" + a + "&rnd=" + Math.random(),
		e = null;
	for (c = G.websso.length; c--;)
		if (a == G.websso[c].rcid) {
			e = G.websso[c];break
	}
	if (e) {
		var f = {
			username : "",
			password : "",
			domain : ""
		};
		for (c = e.args.length; c--;) f[e.args[c].name.toLowerCase()] = sf_get_value(sf_get_myword(e.args[c].value));
		setCookie("WEBFS_SSO_" + a, JSON.stringify(f)), d += "&sso=1"
	}
	b ? window.location = d : openNewWindow(d)
}
function chgBalanceRc(a, b, c, d, e) {
	if (e && !e.disabled) {
		window.g_balanceObj = window.g_balanceObj || new BalanceManager;
		var f = "/por/balance_update.csp",
			g = "rcname=" + encodeURIComponent(a);
		g += "&grpid=" + b, g += "&secid=" + c, g += "&autoid=" + d, g += "&rnd=" + Math.random(), f = f + "?" + g, e.disabled = !0, window.setTimeout(function() {
			G.info.balanceRequest || (G.info.balanceRequest = !0, g_balanceObj.getDataByWeb(f, function(a) {
				G.info.balanceRequest = !1, g_balanceObj.changed ? G.rc.defaults.groupId == b && reDispayRc() : window.setTimeout(function() {
					e.disabled = !1
				}, 1500)
			}))
		}, 200)
	}
}
function BalanceManager() {
}
function handleXmlRc(a) {
	a.app_path = htmlDecode(a.app_path);var b = htmlDecode(a.host).replace(/%([^a-fA-F0-9]|$)/g, "%25$1");
	a.ips = buildIpArray(b), a.ports = buildPortArray(a.port), a.attr = parseInt(a.attr, 10)
}
function displayRcs() {
	sinforUpdateRc(), SinforSelectTabsId(0)
}
function goDefaultPage() {
	if (G.rc.l3vpn.length > 0 && is.iPad) return !1;
	if (parseInt(G.rc.defaults.rcId, 10) <= 0) return !1;
	var a = getRcById(G.rc.defaults.rcId);
	if (!a) return !1;
	var b = G.rc.defaults;
	if (b.rcId && b.rc.type == G.RC_IP && !G.info.supportL3vpn) return !1;
	var c = /^(((https?)|(ftp)):\/\/)?([^:\/\?]+)(:(\d+))?([^:\?]*)?(\?.*)?$/gi;
	if (a = buildHostPro(a), !c.test(a.host_from)) return !1;
	ServiceState.publish("beforeGoDefaultResource"), ServiceState.publish("doingGoDefaultResource");var d,
		e,
		f,
		g,
		h,
		i = a.host_from;
	i.replace(c, function() {
		var a = arguments;
		d = a[2] || "", e = a[5] || "", f = a[7] || "", g = a[8] || "", h = a[9] || ""
	});var j;
	d = "" == d ? "HTTP" == a[G.RC_SVC].toUpperCase() || "HTTPS" == a[G.RC_SVC].toUpperCase() ? a[G.RC_SVC] : "http" : d, f = "" == f ? "0" != a.port_from.toString() ? a.port_from : "80" : f, j = d + "://" + e + ":" + f + g + h;var k = 0;
	if (G.sso.data.length > 0 && IsCanUseSSO(G.sso.data[a.id])) {
		var l = G.sso.data[a.id];
		handleSso(a.type, a.id, !0, k, l)
	} else {
		if (a.type == G.RC_WEB) return sf_handle_websvc(0, a.host_from, a.id, !0), !0;
		if ("function" != typeof sf_handle_websso || !sf_handle_websso(a.id, j, 1)) return setCookie("g_LoginPage", "0"), window.location = j, !0
	}
	return !0
}
function IsHref(a, b) {
	a = buildHostPro(a, b), b = void 0 == b ? 0 : new Number(b);var c = a[G.RC_SVC].toLowerCase();
	if ("0" == a.id.toString()) return !1;
	if (a.type == G.RC_IP && G.info.isUseIeProxy) return !1;
	if ("dns" == c || "2" == a.proto.toString() && "2" == a.type) return !1;
	if (a.port_from != a.port_to || a.host_from != a.host_to && 0 != a.host_to.toString()) {
		if (a.type == G.RC_WEB) return !1;
		if ("http" == c || "https" == c) return !1
	}
	return is.Win() ? c.indexOf("ftp") >= 0 || "fileshare" == c || "http" == c || "https" == c || a.type == G.RC_WEB ? !0 : ("" == a.app_path.trim(), !0) : G.RC_WEB == a.type || "http" == c || "https" == c
}
function SinforHandleAppHref(a, b) {
	var c;
	G.rc.openResourceWin = null, void 0 !== b && (b = parseInt(b));var d = getRcById(a);
	if (null != d) {
		if (window.tmlversion >= 5.35 && void 0 === b) {
			var e = buildIpList(d, !0);
			if (e.length > 1) return
		}
		b = void 0 == b ? 0 : b, IsHref(d, b) && (is.inside(ServiceState.currentStates, "chromeBrowser") && is.inside(ServiceState.currentStates, "finishStartService") || is.inside(ServiceState.currentStates, "notChromeBrowser") && isTcpServiceStarted() ? openTcpResource(a, b) : (showOpeningMask(), ServiceState.subscribe([ "onNewWindowLoad", "readyOpenTcpResource" ]).subscribe([ "notNeedNewWindow", "readyOpenTcpResource" ]).callback(function() {
			openTcpResource(a, b), hideOpeningMask()
		}), ServiceState.subscribe([ "notChromeBrowser", "afterStartTcp" ]).subscribe([ "chromeBrowser", "finishStartService" ]).callback(function() {
			ServiceState.publish("readyOpenTcpResource")
		}), c = d[G.RC_SVC].toLowerCase(), "http" != c && "https" != c || G.sso.data.length && IsCanUseSSO(G.sso.data[a]) ? ServiceState.publish("notNeedNewWindow") : openNewWindowAhead(function() {
			ServiceState.publish("onNewWindowLoad")
		})))
	}
}
function openTcpResource(a, b) {
	var c = getRcById(a),
		d = c[G.RC_SVC].toLowerCase();
	if ("remoteapp" == d) {
		var e = format("CONF SETTING RAPPEXEC {0}&amp;{1}", c.id, c.app_path);
		return void EcAgent("DoConfigure", [ e ])
	}
	var f = extend({}, c.ips[b]),
		g = handleAppHrefHelper(extend(f, c.ports[b]), d);
	if ("function" == typeof sf_handle_websso) {
		var h = sf_handle_websso(a, g, 0);
		if (1 == h) return;
		0 != h && (g = h)
	}
	var i = 8 & c.attr;
	if (null != c && i) {
		var j;
		if (G.sso.data.length && (j = G.sso.data[a]), !j) return closeNewWindowAhead(), void alert(tr("对不起,该资源启用了结合单点登录的主从用户名绑定,但未录制单点登录信息,不允许访问,请联系管理员!"))
	}
	if (G.sso.data.length > 0 && IsCanUseSSO(G.sso.data[c.id])) {
		var k = G.sso.data[c.id];
		return void handleSso(1, c.id, !1, b, k)
	}
	var l = "";
	return "http" == d || "https" == d ? void openNewWindow(g) : (l = d.indexOf("ftp") >= 0 || "fileshare" == d ? d.indexOf("ftp") >= 0 && "" != c.app_path ? format("CONF STARTPROGRAM {0}", Base64.encode(format("{0}|{1}|{2}", c.id, c.name, Base64.encode(g + "|" + Base64.decode(c.app_path))))) : format("CONF STARTPROGRAM {0}", Base64.encode(format("{0}|{1}|{2}", c.id, c.name, Base64.encode(g)))) : format("CONF STARTPROGRAM {0}", Base64.encode(format("{0}|{1}|{2}", c.id, c.name, c.app_path))), void ("" != l && EcAgent("DoConfigure", [ l ])))
}
function handleAppHrefHelper(a, b) {
	var c = handleIpHrefHelper(a, b);
	return c
}
function openNewWindowAhead(a) {
	window.g_newWindowCallback = function() {
		is.fn(a) && a(), window.g_newWindowCallback = new Function
	}, is.Browser("chrome") ? (G.rc.openResourceWin = window.open(), G.rc.openResourceWin.document.body.innerHTML = [ '<div id="webssoinputs"  style="display:none"></div>', '<div id="gbkiframe"  style="display:none"></div>', "<div>", tr("正在打开资源，请稍候..."), "</div>" ].join(""), G.rc.openResourceWin.appendIframe = function() {
		var a = G.rc.openResourceWin.document.createElement("iframe");
		a.name = "gbkpostform", a.id = a.name, a.height = 0, a.width = 0, a.style.visibility = "hidden", a.src = location.origin + "/com/gbkpostform.html?" + parseInt(G.rc.openResourceWin.g_flag - 1) + "&" + G.rc.openResourceWin.g_rc_href, G.rc.openResourceWin.document.getElementById("gbkiframe").appendChild(a)
	}, g_newWindowCallback()) : G.rc.openResourceWin = window.open("/com/openResource.html")
}
function openNewWindow(a) {
	return G.rc.openResourceWin ? (G.rc.openResourceWin.location.href = a, G.rc.openResourceWin) : window.open(a)
}
function closeNewWindowAhead() {
	G.rc.openResourceWin && (G.rc.openResourceWin.window.close(), G.rc.openResourceWin = null)
}
function isTcpServiceStarted() {
	return is.inside(ServiceState.currentStates, "finishStartService") || is.inside(ServiceState.currentStates, "afterStartTcp")
}
function isL3vpnServiceStarted() {
	return is.inside(ServiceState.currentStates, "finishStartService") || is.inside(ServiceState.currentStates, "afterStartL3vpn")
}
function SinforHandleIpHref(a, b) {
	var c;
	G.rc.openResourceWin = null, void 0 !== b && (b = parseInt(b));var d = getRcById(a);
	if (null != d) {
		if (window.tmlversion >= 5.35 && void 0 === b) {
			var e = buildIpList(d, !0);
			if (e.length > 1) return
		}
		b = void 0 == b ? 0 : b, IsHref(d, b) && (isL3vpnServiceStarted() ? openL3vpnResource(a, b) : (showOpeningMask(), ServiceState.subscribe([ "onNewWindowLoad", "afterStartL3vpn" ]).subscribe([ "notNeedNewWindow", "afterStartL3vpn" ]).callback(function() {
			openL3vpnResource(a, b), hideOpeningMask()
		}), c = d[G.RC_SVC].toLowerCase(), "http" != c && "https" != c || G.sso.data.length && IsCanUseSSO(G.sso.data[a]) ? ServiceState.publish("notNeedNewWindow") : openNewWindowAhead(function() {
			ServiceState.publish("onNewWindowLoad")
		})))
	}
}
function openL3vpnResource(a, b) {
	var c = getRcById(a),
		d = c[G.RC_SVC].toLowerCase(),
		e = extend({}, c.ips[b]),
		f = handleIpHrefHelper(extend(e, c.ports[b]), d);
	if ("function" == typeof sf_handle_websso) {
		var g = sf_handle_websso(c.id, f, 0);
		if (1 == g) return;
		0 != g && (f = g)
	}
	var h = 8 & c.attr;
	if (null != c && h) {
		var i;
		if (G.sso.data.length && (i = G.sso.data[a]), !i) return closeNewWindowAhead(), void alert(tr("对不起,该资源启用了结合单点登录的主从用户名绑定,但未录制单点登录信息,不允许访问,请联系管理员!"))
	}
	if (G.sso.data.length > 0 && IsCanUseSSO(G.sso.data[c.id])) {
		var j = G.sso.data[c.id];
		return void handleSso(1, c.id, !1, b, j)
	}
	d = c[G.RC_SVC].toLowerCase();var k = "";
	return "http" == d || "https" == d ? void openNewWindow(f) : (k = d.indexOf("ftp") >= 0 || "fileshare" == d ? d.indexOf("ftp") >= 0 && "" != c.app_path ? format("CONF STARTPROGRAM {0}", Base64.encode(format("{0}|{1}|{2}", c.id, c.name, Base64.encode(f + "|" + Base64.encode(c.app_path))))) : format("CONF STARTPROGRAM {0}", Base64.encode(format("{0}|{1}|{2}", c.id, c.name, Base64.encode(f)))) : format("CONF STARTPROGRAM {0}", Base64.encode(format("{0}|{1}|{2}", c.id, c.name, c.app_path))), void ("" != k && EcAgent("DoConfigure", [ k ])))
}
function handleIpHrefHelper(a, b) {
	var c = "",
		d = "";
	"http" == b ? (c = "80" == a.port_from ? "" : ":" + a.port_from, b = "http://") : "https" == b ? (c = "443" == a.port_from ? "" : ":" + a.port_from, b = "https://") : "fileshare" == b ? b = "\\\\" : -1 != b.indexOf("ftp") && (c = "21" == a.port_from ? "" : ":" + a.port_from, b = "ftp://");var e = a.host_from.indexOf("://") || a.host_from.indexOf("\\\\"),
		f = a.host_from.indexOf(":", e + 1);
	return d = f > 0 ? a.host_from : a.host_from + c, d = -1 == e ? b + d : d
}
function buildIpList(a, b) {
	var c = a.ips,
		d = [],
		e = a.type;
	return b = b || !1, c.forEach(function(c, f) {
			var g = c,
				h = a.ports[f],
				i = [],
				j = "";
			i.push(g.host_from), i.push(0 != g.host_to ? "-" + g.host_to : ""), i.push("2" == a.proto.toString() ? ":[ICMP]" : ""), "2" != a.proto.toString() && i.push(h.port_from ? ":" + h.port_from + " - " + h.port_to : ""), "" != h.port_from.trim() && (j = b ? htmlspecialchars(i.join("")) : e == G.RC_IP ? IsHref(a, f) ? format("<li><a href=\"javascript:SinforHandleIpHref('{0}',{1})\">{2}</a></li>", a.id, f, htmlspecialchars(i.join(""))) : format('<li><a style="cursor:default;text-decoration:none;">{0}</a></li>', htmlspecialchars(i.join(""))) : IsHref(a, f) ? format("<li><a href=\"javascript:SinforHandleAppHref('{0}',{1})\">{2}</a></li>", a.id, f, htmlspecialchars(i.join(""))) : format('<li><a style="cursor:default;text-decoration:none;">{0}</a></li>', htmlspecialchars(i.join(""))), d.push(j))
		}), d
}
function bulidTipIps(a) {
	var b = buildIpList(a, !0);
	return is.Browser("firefox") && b.length > 0 ? b[0] : (b = b.join("&#10;"), htmlspecialchars(b).replace(/&amp;#10/g, "&#10"))
}
function showRcWarnOnUnix(a) {
	var b = [];
	if (2 & a && b.push(tr("安全桌面保护资源")), 4 & a && b.push(tr("主从用户名绑定资源")), 8 & a && b.push(tr("关键文件锁定资源")), 16 & a && b.push(tr("远程应用资源")), b.length > 0) {
		var c = format(tr("非windows平台下，不支持{0}"), b.join(";"));
		alert(c)
	}
}
function getRcLinkCmd(a, b) {
	return isDisabledRc(a) ? "javascript:showRcWarnOnUnix(" + a._display + ")" : b
}
function isDisabledRc(a) {
	return "undefined" != typeof a._display && a._display > 0 && !is.Win()
}
function displayIpRcRow(a, b, c) {
	var d = "";
	if (1 & parseInt(b.attr, 10)) return "";
	if (1 == G.rc.secSD[b.id] || 2 & b.id._display) return "";
	href = "javascript:SinforHandleIpHref('" + b.id + "')", href = getRcLinkCmd(b, href), G.info.isUseIeProxy || !G.info.supportL3vpn ? (d = a.replace(/\[href\]/g, ""), d = d.replace(/\[icostyle\]/g, 'id="unclike"'), d = d.replace(/\[unclike\]/g, "unclike"), d = d.replace(/\[disable\]/g, "disable"), G.info.supportL3vpn ? (d = d.replace(/\[aclass\]/g, 'style="cursor:default;text-decoration:none;"'), d = d.replace(/\[title\]/g, tr("该资源无法使用，请检查浏览器是否启用了代理。"))) : ($ID("supportL3VPN").style.display = "block", d = d.replace(/\[aclass\]/g, 'style="cursor:default;text-decoration:none;"'), d = d.replace(/\[title\]/g, tr("L3VPN无法使用，当前登录了多个VPN，只有首个登录的VPN才可以使用L3VPN")))) : (IsHref(b) ? (d = a.replace(/\[href\]/g, href), d = d.replace(/\[aclass\]/g, 'class="aline"')) : is.iPad ? 1 == vpntype ? (d = a.replace(/\[href\]/g, "javascript:window.open('/com/pptphelp/unlink.html?type=1&language=" + window.language + "')"), d = d.replace(/\[aclass\]/g, 'class="aline" style="color:#999999;"')) : 2 == vpntype && (d = a.replace(/\[href\]/g, "javascript:window.open('/com/l2tphelp/unlink.html?type=2&language=" + window.language + "')"), d = d.replace(/\[aclass\]/g, 'class="aline" style="color:#999999;"')) : (d = a.replace(/\[href\]/g, ""), d = d.replace(/\[aclass\]/g, 'style="cursor:default;text-decoration:none;"')), d = d.replace(/\[icostyle\]/g, ""), d = d.replace(/\[unclike\]/g, ""), d = d.replace(/\[disable\]/g, ""), d = d.replace(/\[title\]/g, ""));var e = htmlspecialchars(b.name);
	"0" != b.id ? window.tmlversion < 5.35 ? e = htmlspecialchars(b.name) : d = d.replace(/\[protocol\]/g, tr("类型：") + getServiceName(b[G.RC_SVC])) : d = d.replace(/\[protocol\]/g, "");var f = "",
		g = "",
		h = [];
	if (("1" == G.config.isDisplayHost && 0 != b.id || b.id <= -1001 && b.id > -3e4) && (isDisabledRc(b) || (h = buildIpList(b, !0))), is.iPad && (1 == vpntype ? "0" == c.type ? e += " <img src='/com/pptphelp/images/pptp.gif' style='display:inherit !important' />" : e = "<img src='/com/pptphelp/images/pptp.gif' style='display:inherit !important' /> " + e : 2 == vpntype && ("0" == c.type ? e += " <img src='/com/l2tphelp/images/l2tp.gif' style='display:inherit !important' />" : e = "<img src='/com/l2tphelp/images/l2tp.gif' style='display:inherit !important' /> " + e)), "0" == c.type ? (d = d.replace(/\[hoststyle\]/g, 0 == h.length ? 'style="display:none"' : ""), d = d.replace(/\[hostip\]/g, h.join(""))) : (d = d.replace(/\[hoststyle\]/g, 'style="display:none"'), d = d.replace(/\[hostip\]/g, "")), d = d.replace(/\[hostport\]/g, ""), d = d.replace(/\[hostiptitle\]/g, h.length > 0 ? 'title="' + h[0] + '"' : ""), d = d.replace(/\[firsthostip\]/, h.length > 0 ? tr("地址：") + h[0] : ""), "1" == c.show_note && "" != b.note ? (d = d.replace(/\[note\]/g, htmlspecialchars(b.note)), d = d.replace(/\[notestyle\]/g, "")) : (d = d.replace(/\[notestyle\]/g, 'style="display:none"'), d = d.replace(/\[note\]/g, "")), "0" == c.type) g += e + f, d = d.replace(/\[name\]/g, g);else {
		var i = e;
		if (d = d.replace(/\[ico\]/g, b.rc_logo), h.length) {
			var j = bulidTipIps(b);
			d = d.replace(/"\[name\]/g, '"' + j)
		}
		g += i + f, d = d.replace(/\[name\]/g, g), d = d.replace(/\[width\]/g, c.logowidth), d = d.replace(/\[height\]/g, c.logoheight)
	}
	return d
}
function displayAppRcRow(a, b, c) {
	var d = "";
	if (1 & parseInt(b.attr, 10)) return "";
	if (1 == G.rc.secSD[b.id] || 2 & b.id._display) return "";
	if (G.config.enableSD && G.config.remoteAppInSafeDesk && 16 & G.rc.rcsHash[b.id]._display) return "";
	var e = "javascript:SinforHandleAppHref('" + b.id + "')",
		f = htmlspecialchars(b.name),
		g = "";
	e = getRcLinkCmd(b, e), IsHref(b) || "REMOTEAPP" == b[G.RC_SVC].toUpperCase() ? (d = a.replace(/\[href\]/g, e), d = d.replace(/\[aclass\]/g, 'class="aline"')) : (d = a.replace(/\[href\]/g, ""), d = d.replace(/\[aclass\]/g, 'style="cursor:default;text-decoration:none;"')), d = d.replace(/\[icostyle\]/g, ""), d = d.replace(/\[unclike\]/g, ""), d = d.replace(/\[disable\]/g, ""), d = d.replace(/\[title\]/g, "");var h = "",
		i = [];
	if (("1" == G.config.isDisplayHost || b.id <= -1001 && b.id > -3e4) && (isDisabledRc(b) || (i = buildIpList(b, !0))), "0" == c.type ? (d = d.replace(/\[hoststyle\]/g, 0 == i.length ? 'style="display:none"' : ""), d = d.replace(/\[hostip\]/g, i.join(""))) : (d = d.replace(/\[hoststyle\]/g, 'style="display:none"'), d = d.replace(/\[hostip\]/g, "")), d = d.replace(/\[hostport\]/g, ""), d = d.replace(/\[hostiptitle\]/g, i.length > 0 ? 'title="' + i[0] + '"' : ""), d = d.replace(/\[firsthostip\]/, i.length > 0 ? tr("地址：") + i[0] : ""), "1" == c.show_note && "" != b.note ? (d = d.replace(/\[note\]/g, htmlspecialchars(b.note)), d = d.replace(/\[notestyle\]/g, "")) : (d = d.replace(/\[notestyle\]/g, 'style="display:none"'), d = d.replace(/\[note\]/g, "")), "0" == c.type) window.tmlversion < 5.35 ? h += f + g : (h += f + g, d = d.replace(/\[protocol\]/g, tr("类型：") + getServiceName(b[G.RC_SVC]))), d = d.replace(/\[name\]/g, h);else {
		if (d = d.replace(/\[ico\]/g, b.rc_logo), i.length) {
			var j = bulidTipIps(b);
			d = d.replace(/"\[name\]/g, '"' + j)
		}
		window.tmlversion < 5.35 ? h += f + g : (h += f + g, d = d.replace(/\[protocol\]/g, tr("类型：") + getServiceName(b[G.RC_SVC]))), d = d.replace(/\[name\]/g, h), d = d.replace(/\[width\]/g, c.logowidth), d = d.replace(/\[height\]/g, c.logoheight), d = d.replace(/\[note\]/g, b.note.replace(/\\/g, "\\\\"))
	}
	return d
}
function handWebHref(a) {
	var b = getRcById(a);
	if (null != b) {
		G.rc.openResourceWin = null;
		var c = b.ips[0].host_from,
			d = (b.ips[0].host_to, b.ports[0].port_from),
			e = b.ports[0].port_to,
			f = b[G.RC_SVC].toUpperCase(),
			g = 1 * b.enable_disguise;
		"FTP" == f ? HandleFtp(g, c, d) : "MAIL" == f ? HandleMail(g, c, e, b.app_path) : "FILESHARE" == f ? HandleFileShare(a) : sf_handle_websvc(0, c, a)
	}
}
function displayWebRcRow(a, b, c) {
	var d = "";
	if (1 & parseInt(b.attr, 10)) return "";
	if (2 & b.id._display) return "";
	var e = "";
	d = "1" == c.show_note && "" != b.note ? a.replace(/\[note\]/g, htmlspecialchars(b.note)).replace(/\[notestyle\]/g, "") : a.replace(/\[note\]/g, "").replace(/\[notestyle\]/g, 'style="display:none"'), "0" == c.type ? (window.tmlversion < 5.35 ? e += htmlspecialchars(b.name) : (e += htmlspecialchars(b.name), d = d.replace(/\[protocol\]/g, tr("类型：") + b[G.RC_SVC])), d = d.replace(/\[name\]/g, e)) : (d = d.replace(/\[ico\]/g, b.rc_logo), window.tmlversion < 5.35 ? e += htmlspecialchars(b.name) : (e += htmlspecialchars(b.name), d = d.replace(/\[protocol\]/g, tr("类型：") + b[G.RC_SVC])), d = d.replace(/\[name\]/g, e), d = d.replace(/\[width\]/g, c.logowidth), d = d.replace(/\[height\]/g, c.logoheight));var f = "";
	b.ips[0].host_from, b.ips[0].host_to, b.ports[0].port_from, b.ports[0].port_to;return f = G.sso.data.length > 0 && IsCanUseSSO(G.sso.data[b.id]) ? "javascript:handleSso(0," + b.id + ")" : "javascript:handWebHref(" + b.id + ")", f = getRcLinkCmd(b, f), d = d.replace(/\[href\]/g, f), d = d.replace(/\[aclass\]/g, 'class="aline"'), d = d.replace(/\[hostip\]/g, ""), d = d.replace(/\[hostport\]/g, ""), d = d.replace(/\[hoststyle\]/g, 'style="display:none"'), d = d.replace(/\[hostiptitle\]/, ""), d = d.replace(/\[firsthostip\]/, ""), d = d.replace(/\[disable\]/g, ""), d = d.replace(/\[title\]/g, "")
}
function displayStrategy(a) {
	var b = G.config.securityStrategy[a],
		c = tr("本资源因不满足下面的策略而无法使用!") + tr("\n策略名:") + b.name + tr("\n描述:") + b.note;
	alert(c)
}
function displayUnauthRc(a, b, c) {
	var d = "",
		e = "";
	if ("1" == c.show_note && "" != b.note ? (d = a.replace(/\[note\]/g, b.note.replace(/\\/g, "\\\\")), d = d.replace(/\[notestyle\]/g, "")) : (d = a.replace(/\[note\]/g, ""), d = d.replace(/\[notestyle\]/g, 'style="display:none"')), 0 == b.id || b.type != G.RC_APP && b.type != G.RC_IP) d = d.replace(/\[hoststyle\]/g, 'style="display:none"'), d = d.replace(/\[hostip\]/g, ""), d = d.replace(/\[hostport\]/g, ""), d = d.replace(/\[hostiptitle\]/, ""), d = d.replace(/\[firsthostip\]/, "");else {
		"1" == G.config.isDisplayHost ? (d = d.replace(/\[hostip\]/g, ""), d = d.replace(/\[hostport\]/g, ""), d = d.replace(/\[hoststyle\]/g, ""), d = d.replace(/\[hostiptitle\]/, ""), d = d.replace(/\[firsthostip\]/, "")) : (d = d.replace(/\[hoststyle\]/g, 'style="display:none"'), d = d.replace(/\[hostip\]/g, ""), d = d.replace(/\[hostport\]/g, ""), d = d.replace(/\[hostiptitle\]/, ""), d = d.replace(/\[firsthostip\]/, ""))
	}
	"0" == c.type ? (window.tmlversion < 5.35 ? e += htmlspecialchars(b.name) : (e += htmlspecialchars(b.name), d = d.replace(/\[protocol\]/g, tr("类型：") + b[G.RC_SVC])), d = d.replace(/\[name\]/g, e)) : (d = d.replace(/\[ico\]/g, b.rc_logo), e += htmlspecialchars(b.name), d = d.replace(/\[name\]/g, e), d = d.replace(/\[width\]/g, c.logowidth), d = d.replace(/\[height\]/g, c.logoheight));var f = "javascript:displayStrategy(" + b.auth_sp_id + ")";
	return d = d.replace(/\[href\]/g, f), d = d.replace(/\[aclass\]/g, 'class="aline"'), d = d.replace(/\[onclick\]/g, ""), d = d.replace(/\[CF_AUTO_LOGIN\]/g, ""), d = d.replace(/\[ssostyle\]/g, 'style="visibility:hidden;"'), d = d.replace(/\[ssostyle_text\]/g, 'style="display:none;"'), d = d.replace(/\[disable\]/g, ""), d = d.replace(/\[title\]/g, "")
}
function reDisplayRcRow() {
	if (-2 == G.rc.defaults.groupId && !needShowUnauthRc() || -1e3 == G.rc.defaults.groupId)
		for (var a = 0, b = G.rc.groups.length; b > a; a++) {
			var c = G.rc.groupsHash[G.rc.groups[a].id];
			if (c && c.display) {
				G.rc.defaults.groupId = G.rc.groups[a].id;break
			}
	}
	var c = G.rc.groupsHash[G.rc.defaults.groupId];
	c && c.state && displayRcRow(g_rcRowFormat, g_rcIcoFormat, G.rc.defaults.groupId);
}
function displayRcRow(a, b, c) {
	$ID("show_per_info") && -1 != a.indexOf("CF_AUTO_LOGIN") && (-1 != b.indexOf("ul") ? (a = '<dd id="inline_list" [tddclass]><dl id="text_link"><dt><a onclick="[href]" [aclass]>[name]</a><span [hoststyle]>&nbsp;[hostip]</span></dt><dd><dl><dd style="padding-left:4px;"><ul><li><span [ssostyle_text]></span></li><li class="y_line" [notestyle]>|</li><li [notestyle]>[note]</li></ul></dd></dl></dd></dl></dd>', b = '<ul class="icon" [icostyle]><li class="pic"><a onclick="[href]"  [aclass]><img src="/por/svpnrcico/[ico]" width="[width]" height="[height]" alt="[note][hostip]"/></a></li><li class="text" align="center"  style="overflow:hidden;width:[width]px;height:30px;line-height:15px;text-overflow:ellipsis;"><a onclick="[href]" [aclass] title="[name]">[name]</a></li></ul>') : (a = '<dl [tddclass] [icostyle]><dt><a onclick="[href]" title="[name][note][hostip]" [aclass]><img src="/por/svpnrcico/[ico]" width="[width]" height="[height]" alt="[note][hostip]" /></a></dt><dd><p class="name"><a title="[name]" onclick="[href]" [aclass]>[name]</a><span class="ip">[hostip]</span></p><p class="note" [notestyle]>[note]</p></dd></dl>', b = a));var d = getRcGrpById(c),
		e = $ID("groupName");
	if (null != d) {
		e && (-2 != c ? e.innerHTML = htmlspecialchars(d.name) : e.innerHTML = htmlspecialchars(tr("未获授权资源列表")));
		var f = null;
		if (f = -2 == c ? getUnauthRc() : getRcByGrp(c), null != f)
			if (G.rc.defaults.groupId = c, "1" == d.type && (a = b), window.customDisplayRc) window.customDisplayRc.call(this, f, "1" == d.type);else {
				for (var g = "", h = 0, i = tr("负载均衡"), j = !1, k = 0, l = f.length; l > k; k++) {
					var m = "",
						n = "";
					if ("-99" != f[k].id || -2 == c) {
						if (n = h % 2 == 1 ? a.replace(/\[tddclass\]/g, 'class="bg_color"') : a.replace(/\[tddclass\]/g, ""), h++, 0 == f[k].authorization ? m = displayUnauthRc(n, f[k], d) : f[k].type == G.RC_WEB ? m = displayWebRcRow(n, f[k], d) : f[k].type == G.RC_APP ? m = displayAppRcRow(n, f[k], d) : f[k].type == G.RC_IP && (j = !0, m = displayIpRcRow(n, f[k], d)), 1 == d.load_balance && -1 != f[k].selectid && is.Win()) {
							var o = "'" + f[k].name + "'," + d.id + "," + f[k].selectid + "," + f[k].id + ",this";
							m = m.replace(/\[balancestyle\]/g, ""), m = m.replace(/\[onclick\]/g, "javascript:chgBalanceRc(" + o + ")"), m = m.replace(/\[CF_BALANCE\]/g, tr("更改负载均衡")), m = m.replace(/\[balancetext\]/g, i), m = m.replace(/\[CF_AUTO_LOGIN\]/g, ""), m = m.replace(/\[balancestyle_text\]/g, ""), m = m.replace(/\[rcid\]/g, f[k].id)
						} else m = m.replace(/\[onclick\]/g, ""), m = m.replace(/\[CF_BALANCE\]/g, ""), m = m.replace(/\[balancetext\]/g, i), m = m.replace(/\[balancestyle\]/g, 'style="visibility:hidden;"'), m = m.replace(/\[CF_AUTO_LOGIN\]/g, ""), m = m.replace(/\[balancestyle_text\]/g, 'style="display:none;"'), m = m.replace(/\[rcid\]/g, f[k].id);
						g += m
					}
				}
				$ID("rcsDisplayID").innerHTML = g, window.tmlversion < 5.35 && switchrcDisplayType(c), window.customDisplayRcEnd && window.customDisplayRcEnd.call(this, f, $ID("rcsDisplayID")), j || ($ID("supportL3VPN").style.display = "none")
		}
	}
}
function displayRcGrp(a) {
	for (var b = [], c = G.rc.groups, d = 0, e = c.length; e > d; d++)
		if (G.rc.groupsHash[c[d].id].state = !0, -2 != c[d].id || needShowUnauthRc())
			if (G.rc.groupsHash[c[d].id].display || -2 == c[d].id) {
				var f = -2 != c[d].id ? htmlspecialchars(c[d].name) : htmlspecialchars(tr("未获授权资源列表")),
					g = "javascript:displayRcRow(g_rcRowFormat,g_rcIcoFormat," + c[d].id + ")",
					h = a.replace(/\[name\]/g, f).replace(/\[href\]/g, g);
				b[b.length] = h
			} else
				G.rc.groupsHash[c[d].id].state = !1;
		else
			G.rc.groupsHash[c[d].id].state = !1;
	$ID("rcGrpsDisplayID").innerHTML = b.join(""), window.customDisplayRcGrpEnd && window.customDisplayRcGrpEnd.call(this, c, $ID("rcGrpsDisplayID"))
}
function reDispayRc() {
	displayBrowser(), displayRcGrp(g_rcGrpRowFormat), reDisplayRcRow()
}
function sinforUpdateRc() {
	0 != G.rc.groups.length && reDispayRc()
}
function buildHostPro(a, b) {
	return b = void 0 === b ? 0 : new Number(b), a.host_from = a.ips[b].host_from, a.host_to = a.ips[b].host_to, a.port_from = a.ports[b].port_from, a.port_to = a.ports[b].port_to, a
}
function getServiceName(a) {
	var b = a.indexOf("(");
	return 0 > b ? a : a.substr(0, b - 1)
}
function getRcGrpById(a) {
	var b = G.rc.groupsHash[a];
	return is.empty(b) ? null : b
}
function getRcById(a) {
	var b = G.rc.rcsHash[a];
	return is.empty(b) ? null : b
}
function getUnauthRc() {
	var a = G.rc.unAuth;
	return is.empty(a) ? null : a
}
function getRcByGrp(a) {
	var b = G.rc.groupRcs[a],
		c = [];
	if ("undefined" != typeof b)
		for (var d = 0, e = b.length; e > d; d++) {
			var f = getRcById(b[d]);
			f && 1 == f.authorization && (c[c.length] = f)
	}
	return c
}
function handRcOnUnix() {
	function a(a, b) {
		a._display || (a._display = 0), a._display |= b
	}
	if (!is.Win()) {
		var b = G.rc.secSD;
		if (G.config.enableSD && b.length > 0)
			for (var c in b)
				if ("serialize" != c) {
					var d = G.rc.rcsHash[c];
					d && a(d, 2)
		}
		G.rc.userBind.forEach(function(b) {
			var c = G.rc.rcsHash[b];
			c && a(c, 4)
		}), G.rc.fileLock.forEach(function(b) {
			var c = G.rc.rcsHash[b];
			c && a(c, 8)
		})
	}
}
function seltabs(a) {
	for (var b = a.parentNode, c = 0, d = b.childNodes.length; d > c; c++) b.childNodes[c].className = "";
	a.className = "seled"
}
function SinforSelectTabsId(a) {
	var b = $ID("rcGrpsDisplayID").childNodes;
	0 != b.length && (b[a].className = "seled")
}
function getIconCls(a) {
	return {
		32 : "32 icon50",
		48 : "48 icon50",
		64 : "64 icon72",
		128 : "128 icon120"
	}[a]
}
function switchrcDisplayType(a) {
	var b = getRcGrpById(a);
	null != b && ("1" == b.type ? $ID("rcsDisplayID").className = "clearfix icon" + getIconCls(b.logowidth) : $ID("rcsDisplayID").className = "list")
}
function existSso(a) {
	var b = typeof a;
	return "undefined" != b && "unknown" != b
}
function IsCanUseSSO(a) {
	var b = navigator.appVersion;
	return 1 == (1 == G.sso.config.enable && is.IE() && -1 == b.indexOf("Windows 9") && G.sso.data.length > 0 && G.sso.obj && existSso(a))
}
function handleSso(a, b, c, d, e) {
	c = void 0 === c ? !1 : c, d = void 0 === d ? 0 : d;var f = 0;
	if (null == G.sso.obj) return !1;
	var g = getRcById(b);
	if (null == g) return !1;
	g = buildHostPro(g, d);var h = g.id;
	if (G.RC_WEB == a)
		"FTP" == g[G.RC_SVC] ? HandleFtp(g.enable_disguise, g.host_from, g.port_from, c, h) : "MAIL" == g[G.RC_SVC] ? HandleMail(g.enable_disguise, g.host_from, g.port_to, g.app_path, c, h) : sf_handle_websvc(d, g.host_from, b, c);else {
		var i = g[G.RC_SVC].toLowerCase();
		if ("http" === i || "https" === i) {
			var j = "";
			"http" == i ? (j = "80" == g.port_from ? "" : ":" + g.port_from, i = "http://") : "https" == i ? (j = "443" == g.port_from ? "" : ":" + g.port_from, i = "https://") : "fileshare" == i ? (j = "", i = "\\") : -1 != i.indexOf("ftp") && (j = "21" == g.port_from ? "" : ":" + g.port_from, i = "ftp://");
			var k = "",
				l = g.host_from.indexOf("://") || g.host_from.indexOf("\\\\"),
				m = g.host_from.indexOf(":", l + 1);
			k = m > 0 ? g.host_from : g.host_from + j, k = -1 == l ? i + k : k, closeNewWindowAhead(), ssoOpenWindow(k, c, e)
		} else {
			var n = 0;
			0 != (8 & g.attr) && (n = 1), f = G.sso.obj.SetSSOConfigUB(G.sso.data[h].data, 0, g.app_path, "", a, n)
		}
	}
	return -1 != f
}
function ssoOpenWindow(a, b, c) {
	if ("" != a && "?" != a) {
		a.match(/^(http:\/\/)|(https:\/\/)\s*/i) || (a = "http://" + a);
		var d = "";
		void 0 != c && void 0 != c.mark && (d = c.mark), b ? (setCookie("g_LoginPage", "0"), G.sso.obj.CreateIEWithHandle(a, d), Close()) : G.sso.obj.CreateIEWithHandle(a, d)
	}
}
function JSDecodePsw(a) {
	var b,
		c,
		d,
		e,
		f,
		g,
		h,
		i = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1 ];
	for (g = a.length, f = 0, h = ""; g > f;) {
		do b = i[255 & a.charCodeAt(f++)]; while (g > f && -1 == b);
		if (-1 == b) break;
		do c = i[255 & a.charCodeAt(f++)]; while (g > f && -1 == c);
		if (-1 == c) break;
		h += String.fromCharCode(b << 2 | (48 & c) >> 4);
		do {
			if (d = 255 & a.charCodeAt(f++), 61 == d) return h.substring(3);
			d = i[d]
		} while (g > f && -1 == d);
		if (-1 == d) break;
		h += String.fromCharCode((15 & c) << 4 | (60 & d) >> 2);
		do {
			if (e = 255 & a.charCodeAt(f++), 61 == e) return h.substring(3);
			e = i[e]
		} while (g > f && -1 == e);
		if (-1 == e) break;
		h += String.fromCharCode((3 & d) << 6 | e)
	}
	return h.substring(3)
}
function parseToEmpty(a, b) {
	for (var c = [ null, "SangforDefaultValue" ], d = 0; d < b.length; d++)
		for (var e = b[d], f = a[e], g = 0; g < c.length; g++)
			if (f === c[g]) {
				a[e] = "";break
	}
}
function sf_handle_websso(a, b, c) {
	window.location.hostname;
	if ("" == G.websso && 0 > a && a > -1e3) return 0;
	for (var d = 0, e = 0; e < G.websso.length; e++)
		if (a == G.websso[e].rcid) {
			d = e + 1;break
	}
	if ("" == b || 0 == d) return 0;
	var f = G.websso[d - 1];
	if (null == f.args) return 0;
	var g = b;
	if (f.act == ARG_SSO_UTF8GET) {
		var h = -1,
			i = "",
			j = "";
		-1 != (h = g.indexOf("#")) && (j = g.substring(h, g.length));
		var k = -1 == h ? g.length : h;
		(h = g.indexOf("?")) >= 0 && (i = g.substring(h + 1, k), g = g.substring(0, h)), SF_g_ssoform.resetForm();
		for (var e = 0; e < f.args.length; e++) SF_g_ssoform.appendInput(unescape(f.args[e].name), sf_get_myword(f.args[e].value));
		if ("" != i) {
			h = -1;
			var l = new Array;
			l = i.split("&");
			for (var e = 0; e < l.length && (h = l[e].indexOf("="), -1 != h); e++) {
				var m = l[e].substring(0, h),
					n = l[e].substring(h + 1, l[e].length);
				SF_g_ssoform.appendInput(m, n)
			}
		}
		var o = getRcById(a);
		return o ? ("1" == o.type || "2" == o.type ? SF_g_ssoform.setFormaction(b) : SF_g_ssoform.setFormaction(g + j), SF_g_ssoform.setFormmethod("get"), G.rc.openResourceWin ? SF_g_ssoform.setFormtarget("_self") : SF_g_ssoform.setFormtarget("_blank"), a == G.rc.defaults.rcId && c && (setCookie("g_LoginPage", "0"), SF_g_ssoform.setFormtarget("_self")), SF_g_ssoform.buildForm(), SF_g_ssoform.submitForm(), 1) : 0
	}
	if (f.act == ARG_SSO_UTF8POST || f.act == ARG_SSO_UTF8COOKIE || f.act == ARG_SSO_GBKCOOKIE) {
		SF_g_ssoform.resetForm();
		var p = "";
		if (G.rc.easyLinkHash[a]) {
			var q = "",
				r = "";
			b = b.replace(/#.*$/i, function(a) {
				return q = a, ""
			}), b.indexOf("sangfor_redirect=1") < 0 && (r = -1 != b.indexOf("?") ? "&sangfor_redirect=1" : "?sangfor_redirect=1", b += r), p = b + "&SANGFOR_COOKIE_SSO=1" + q
		} else
			p = b.replace(/((http)|(https))\/\d+/g, "$1/9");
		f.act == ARG_SSO_UTF8COOKIE ? (b = p, SF_g_ssoform.appendInput("sf_cookie_sso", 1)) : f.act == ARG_SSO_GBKCOOKIE && (b = p, SF_g_ssoform.appendInput("sf_cookie_sso", 1), SF_g_ssoform.appendInput("sf_charset", "GBK"));
		for (var e = 0; e < f.args.length; e++) SF_g_ssoform.appendInput(unescape(f.args[e].name), sf_get_myword(f.args[e].value));
		return SF_g_ssoform.setFormaction(b), SF_g_ssoform.setFormmethod("post"), G.rc.openResourceWin ? SF_g_ssoform.setFormtarget("_self") : SF_g_ssoform.setFormtarget("_blank"), a == G.rc.defaults.rcId && c && (SF_g_ssoform.setFormtarget("_self"), setCookie("g_LoginPage", "0")), SF_g_ssoform.buildForm(), SF_g_ssoform.submitForm(), 1
	}
	if ((f.act == ARG_SSO_GBKGET || f.act == ARG_SSO_GBKPOST || f.act == ARG_SSO_GBKCOOKIE) && "undefined" == typeof g_ispda) {
		if (window.sf_g_formtarget = "_parent", a == G.rc.defaults.rcId && c) {
			setCookie("g_LoginPage", "0"), window.sf_g_webssoinfos = G.websso, window.sf_g_logininfo = G.sso.info;
			var s = document.createElement("iframe");
			s.name = "gbkpostform", s.id = s.name, s.height = 0, s.width = 0, s.style.visibility = "hidden", s.src = "/com/gbkpostform.html?" + parseInt(d - 1) + "&" + b, document.body.appendChild(s)
		} else
			G.rc.openResourceWin && G.rc.openResourceWin.document && G.rc.openResourceWin.document.body ? (exportToNewWindow(d, b), G.rc.openResourceWin.appendIframe()) : openNewWindowAhead(function() {
				exportToNewWindow(d, b), G.rc.openResourceWin.appendIframe()
			});
		return 1
	}
	return f.act == ARG_SSO_FIRESHARE && HandleFileShare(a, c), 0
}
function exportToNewWindow(a, b) {
	G.rc.openResourceWin.g_flag = a, G.rc.openResourceWin.g_rc_href = b, G.rc.openResourceWin.sf_g_logininfo = G.sso.info, G.rc.openResourceWin.sf_g_webssoinfos = G.websso, G.rc.openResourceWin.sf_get_myword = sf_get_myword, G.rc.openResourceWin.sf_build_querystr = sf_build_querystr, G.rc.openResourceWin.sf_get_value = sf_get_value, G.rc.openResourceWin.sf_g_formtarget = sf_g_formtarget
}
function sf_get_myword(a) {
	a = decodeURIComponent(a);
	for (var b = /\<\%([a-z_]{5,20})\%\>/i, c = null, d = 0, e = 0, f = ""; null != (c = b.exec(a));) {
		e = c.index, f += a.substring(d, e);var g = c[1];
		f += "undefined" != typeof G.sso.info[g] ? decodeURIComponent(G.sso.info[g]) : c[0], a = a.substr(e + c[0].length)
	}
	return f += a
}
function sf_build_querystr(a) {
	if (0 == a.length) return "";
	for (var b = "", c = 0; c < a.length; c++) c > 0 && (b += "&"), b = b + unescape(a[c].name) + "=" + sf_get_value(sf_get_myword(a[c].value));
	return b
}
function sf_get_value(a) {
	var b = new String(a);
	return "&&&&" == b.substring(0, 4) ? SSOEncode(b.substring(4, b.length)) : a
}
function initGlobal() {
	var a = parseUrl().params;
	G.info.isFromClient = "1" == a.showsvc, G.info.isFromClient ? ServiceState.publish("fromClient") : ServiceState.publish("notFromClient"), G.info.isAutoOpen = "1" == a.autoOpen, G.info.isAutoOpen ? ServiceState.publish("autoOpen") : ServiceState.publish("notAutoOpen"), G.sso.info.cert = getCookie("SSL_CLIENT_INFO") || "", -1 === navigator.userAgent.indexOf("AppleWebKit") || is.Browser("edge") || is.Browser("safari") ? ServiceState.publish("notChromeBrowser") : ServiceState.publish("chromeBrowser")
}
function initServiceCookie() {
	setCookie("haveLogin", "1")
}
function setDataToCookie() {
	setCookie("scacheUseable", G.config.enableSCache), "Anonymous" === G.info.loginName ? G.config.denyNormalAccess ? setCookie("LoginMode", "0") : setCookie("LoginMode", "1") : setCookie("LoginMode", "2"), setCookie("AppCount", G.rc.tcp.length), setCookie("remoteAppCount", G.rc.remoteApp.length)
}
function setSourceUrlToClient() {
	var a = getCookie("VpnLine");
	if (a) {
		var b = 0;
		EcAgent("DoConfigure", [ "CONF SETTING LOGINADDR " + a ], {
			error : function() {
				b > 3 || setTimeout(function() {
					b++, setSourceUrlToClient()
				}, 200)
			}
		})
	}
}
function checkOutOfDate() {
	var a = getConfigValue("Other.pwp_remind_msg", ""),
		b = getConfigValue("Other.isPubUser", 0),
		c = parseInt(getCookie("is_reminded"), 10);
	b || !a || c || (setCookie("is_reminded", "1"), alert(a))
}
function initEcAgentAfterLogin() {
	ServiceState.publish("beforeInitEcAgent");var a = parseUrl(),
		b = [ a.host + " " + a.port ];
	EcAgent("InitECAgent", b, {
		success : function(a) {
			a && ServiceState.publish("afterInitEcAgent")
		}
	}), ServiceState.publish("doingInitEcAgent")
}
function syncLogin() {
	ServiceState.publish("beforeSyncLogin"), encryptSession({
		success : function(a) {
			EcAgent("DoConfigure", [ "SET TWFID " + a ], {
				success : function(a) {
					"1" === a.result && ServiceState.publish("afterSyncLogin")
				}
			})
		}
	}), ServiceState.publish("doingSyncLogin")
}
function syncBrowserType() {
	ServiceState.publish("beforeSyncBrowserType");var a = is.Browser();
	EcAgent("doConfigure", [ "SET BROWSER " + a ], {
		success : function(a) {
			"1" === a.result && ServiceState.publish("afterSyncBrowserType")
		}
	}), ServiceState.publish("doingSyncBrowserType")
}
function syncServerAddress() {
	ServiceState.publish("beforeSyncServerAddress");var a = parseUrl(),
		b = a.host + " " + a.port;
	EcAgent("DoConfigure", [ "SET SERVADDR " + b ], {
		success : function(a) {
			"1" === a.result && ServiceState.publish("afterSyncServerAddress")
		}
	}), ServiceState.publish("doingSyncServerAddress")
}
function updateAuthorizationData(a) {
	if (G.rc.unAuth = [], "" != a.trim() && a && "" != a) {
		var b = [];
		a.split(";").forEach(function(a) {
			if ("" != a.trim()) {
				var c = a.split(",");
				b[b.length] = {
					id : parseInt(c[0], 10),
					check : parseInt(c[1], 10),
					sid : parseInt(c[2], 10)
				}
			}
		}), b.forEach(function(a) {
			var b = G.rc.rcsHash[a.id];
			return "undefined" == typeof b ? !0 : (a.check == b.authorization && a.sid == b.auth_sp_id || (b.authorization = a.check, b.auth_sp_id = a.sid), void (0 == b.authorization && b.id > -1e3 && G.rc.unAuth.push(b)))
		})
	}
}
function logout() {
	ServiceState.publish("onLogoutClick")
}
function clientLogout() {
	ServiceState.publish("beforeClientLogout"), EcAgent("Logout", null, {
		success : function(a) {
			a.result && (Watcher.isWatchingClientLogout || Watcher.watchClientLogout(), Watcher.logoutDelay = 500)
		},
		error : function() {
			pageLogout()
		}
	})
}
function syncLangInfo() {
	ServiceState.publish("beforeSyncLanguage");var a = window.language || "zh_CN";
	EcAgent("DoConfigure", [ "SET LANG " + a ], {
		success : function(a) {
			a && ServiceState.publish("afterSyncLanguage")
		}
	}), ServiceState.publish("doingSyncLanguage")
}
function syncCertInfo() {
	function a() {
		setTimeout(function() {
			b++, syncCertInfo()
		}, 300)
	}
	ServiceState.publish("beforeSyncCert"), G.sso.info.cert ? EcAgent("DoConfigure", [ "CONF SETTING CERTINFO " + Base64.encode(G.sso.info.cert) ], {
		success : function() {
			ServiceState.publish("afterSyncCert")
		},
		error : function() {
			a()
		}
	}) : EcAgent("DoQueryService", [ "QUERY QSETTING RCERTINFO" ], {
		success : function(a) {
			a.result && (G.sso.info.cert = Base64.decode(a.result)), ServiceState.publish("afterSyncCert")
		},
		error : function() {
			a()
		}
	}), ServiceState.publish("doingSyncCert");var b = 0
}
function checkIeProxyState() {
	ServiceState.publish("beforeCheckIeProxy"), checkProxy({
		haveProxy : function() {
			G.info.isUseIeProxy = !0, ServiceState.publish("haveIeProxy"), ServiceState.publish("afterCheckIeProxy")
		},
		noProxy : function() {
			G.info.isUseIeProxy = !1, ServiceState.publish("noIeProxy"), ServiceState.publish("afterCheckIeProxy")
		}
	}), ServiceState.publish("doingCheckIeProxy")
}
function testProxyServer() {
	ServiceState.publish("beforeTestProxy"), testProxy({
		success : function() {
			ServiceState.publish("afterTestProxy")
		}
	}), ServiceState.publish("doingTestProxy")
}
function checkUpdateAfterLogin() {
	ServiceState.publish("beforeUpdate"), checkUpdate("AFTERLOGIN", {
		success : function() {
			ServiceState.publish("afterUpdate")
		}
	}), ServiceState.publish("doingUpdate")
}
function loadConfigData() {
	ServiceState.publish("beforeLoadConfigData"), EcAgent("GetConfig", [ 1 ], {
		success : function(a) {
			a && (is.empty(a), G.config.raw = a, initConfigData(), ServiceState.publish("afterLoadConfigData"))
		}
	}), ServiceState.publish("doingLoadConfigData")
}
function loadResourceData() {
	ServiceState.publish("beforeLoadResourceData"), EcAgent("GetConfig", [ 2 ], {
		success : function(a) {
			a && (is.empty(a), G.rc.raw = a, initResourceData(), ServiceState.publish("afterLoadResourceData"))
		}
	}), ServiceState.publish("doingLoadResourceData")
}
function initResourceData() {
	if (is.empty(G.rc.raw)) return !1;
	var a = getRcValue("SD.rclist.rclist", "").toString();
	G.config.enableSD = getRcValue("SD.Global.enable", 0), G.config.remoteAppInSafeDesk = getRcValue("SD.DesktopFormat.rapp_in_safedesk", 0), G.config.enableSD && a.trim() && a.split(",").forEach(function(a) {
		G.rc.secSD[a] = 1
	}), G.rc.groups = buildArray("Resource.RcGroups.Group", G.rc.raw), G.rc.groups.forEach(function(a) {
		var b = parseInt(a.id);
		a.attr = parseInt(a.attr), G.rc.groupsHash[b] = a
	}), G.rc.groups.sort(function(a, b) {
		return a.id >= 0 && b.id >= 0 ? a.id > b.id ? 1 : -1 : a.id < 0 && b.id < 0 ? a.id > b.id ? -1 : 1 : a.id < 0 ? 1 : -1
	}), G.rc.rcs = buildArray("Resource.Rcs.Rc", G.rc.raw), G.rc.rcs.forEach(function(a) {
		var b = parseInt(a.id),
			c = parseInt(a.rc_grp_id);
		a.attr = parseInt(a.attr), a.app_path = htmlDecode(a.app_path);
		var d = htmlDecode(a.host).replace(/%([^a-fA-F0-9]|$)/g, "%25$1");
		switch (a.ips = buildIpArray(d), a.ports = buildPortArray(a.port), 0 === b && "L3VPN全网资源(或服务)" == a.name ? a.name = tr("L3VPN全网资源(或服务)") : -99 === b && "web全网资源(或服务)" == a.name && (a.name = tr("web全网资源(或服务)")), G.rc.rcsHash[b] = a, parseInt(a.type)) {
		case G.RC_WEB:
			G.rc.web.push(a);
			break;case G.RC_IP:
			G.rc.l3vpn.push(a);
			break;case G.RC_APP:
			G.rc.tcp.push(a)
		}
		var e = a.svc.toLowerCase();
		"remoteapp" === e && (G.rc.remoteApp.push(a), a._display || (a._display = 0), a._display |= 16), 12 & a.attr && G.rc.userBind.push(b), is.set(G.rc.groupRcs[c]) || (G.rc.groupRcs[c] = []), G.rc.groupRcs[c].push(a.id), -99 === b || 1 & a.attr || (G.rc.groupsHash[c].display = !0), -1e3 >= b && b > -3e4 && (G.info.haveBalanceResource = !0)
	}), G.rc.defaults.rcId = getRcValue("Other.defaultRcId", 0), G.rc.defaults.rcId && (G.rc.defaults.rc = G.rc.rcsHash[G.rc.defaults.rcId]);var b = buildArray("Resource.Easylink.ElnkRc", G.rc.raw);
	b.forEach(function(a) {
		if (!is.set(a.Id)) return !1;
		var b,
			c = a.MapAddr;
		void 0 != c && ("0" == a.Mode ? (b = format("https://{0}:{1}", parseUrl().host, c), a.MapAddr = b) : null == c.match(/https?/i) && (c = htmlDecode(c), c = "https://" + c, a.MapAddr = c), G.rc.easyLinkHash[a.Id] = a)
	});var c = getRcValue("Filelock.Data", "").trim(),
		d = [];
	c && (d = c.split(";"), d.forEach(function(a) {
		var b;
		a = a.trim(), "" != a && (b = a.split(":"), is.set(b[0]) && G.rc.fileLock.push(b[0]))
	}))
}
function initConfigData() {
	if (is.empty(G.config.raw)) return !1;
	G.config.enableSslTray = getConfigValue("SysTray.enable", 0), G.config.autoStartClient = getConfigValue("Other.autoStartCS", 0), G.config.enableAutoLogin = getConfigValue("Other.enableautologin", 0), G.config.enableAutoRelogin = getConfigValue("Other.enableAutoRelogin", 0), G.config.denyNormalAccess = getConfigValue("Other.denyNormalAccess", 0), G.config.enableSCache = getConfigValue("SCache.enable", 0), G.config.enableCsCompress = 1 & getConfigValue("TcpApplication.compress", 0), G.config.sslvpnNameFix = getLocalConfigValue("Session.nameFix", ""), G.config.enableSecurityCheck = !!getConfigValue("SecurityCheck", !1), G.config.securityCheckInterval = getConfigValue("SecurityCheck.attribute.interval", 0);var a = buildArray("Conf.SecurityCheck.strategies.strategy", G.config.raw);
	a.forEach(function(a) {
		var b = a.id;
		G.config.securityStrategy[b] = a
	}), G.config.isDisplayHost = getConfigValue("Other.displayhost", 0), G.config.enableSecurityCheck ? ServiceState.publish("haveSecurityCheck") : ServiceState.publish("noSecurityCheck")
}
function initInfoData() {
	G.info.loginName = getConfigValue("Other.login_name", "").toString(), G.info.isReLogin = getConfigValue("Other.isRelogin", 0), G.info.lastLoginTime = getConfigValue("Other.RelogTimeLast", 0), G.info.lastLoginIp = getConfigValue("Other.RelogIPLast", "")
}
function checkNeedClient() {
	G.config.enableSslTray || G.config.enableSecurityCheck || getCookie("UsingDkey") > 0 || G.info.haveBalanceResource ? ServiceState.publish("needClient") : ServiceState.publish("notNeedClient")
}
function initSso() {
	dealSSO()
}
function initSsoData() {
	function a(a) {
		var b = "";
		return is.set(a) && a !== !1 && (b = encodeURIComponent(a)), b
	}
	if (ServiceState.publish("beforeInitSso"), ServiceState.publish("doingInitSso"), !G.rc.raw.Resource.Sso) return !1;
	G.sso.raw = G.rc.raw.Resource.Sso, G.sso.config.enable = getRcValue("Sso.enable", 0), G.sso.config.show_ssoconf = getRcValue("Sso.show_ssoconf", 0), G.sso.config.show_perssoconf = getRcValue("Sso.show_perssoconf", 0), G.sso.config.ssotimeout = getRcValue("Sso.ssotimeout", 0), G.sso.info.username = G.info.loginName.replace(/<.+>$/, "");var b,
		c = [ "", "", "" ];
	G.sso.info.cert && (c = G.sso.info.cert.split("<>"), c.length >= 3 && (b = G.sso.info.cert.indexOf(c[1]) + c[1].length + 2, c[2] = G.sso.info.cert.substring(b)));var d,
		e = JSDecodePsw(G.sso.raw.pwd);
	for (d = 0; d < e.length && 0 != e.charCodeAt(d); d++)
		;
	e = e.substr(0, d), G.sso.info.userpwd = a(e), G.sso.info.phone_num = a(G.sso.raw.phone_num), G.sso.info.group_name = a(G.sso.raw.groupname), G.sso.info.scert_thum = a(c[0]), G.sso.info.scert_sn = a(c[1]), G.sso.info.scert_info = a(c[2]), G.sso.info.dkey_id = a(getCookie("DkeySerialNumber"));var f,
		g = getRcValue("Sso.data", "");
	g && (f = g.split(";"), f.forEach(function(a) {
		var b = a.split(":");
		G.sso.data || (G.sso.data = {}), G.sso.data[b[0]] = {
			data : b[1]
		}, is.set(b[2]) && b[2] && (G.sso.data[b[0]].mark = b[2])
	})), G.websso = buildArray("Resource.WebSsoInfos.webssoinfo", G.rc.raw), G.websso.forEach(function(a) {
		a.args = buildArray("args", a), a.args.forEach(function(a) {
			a.value = htmlDecode(a.value)
		})
	}), ServiceState.publish("afterInitSso")
}
function loadBalanceData() {
	if (G.info.haveBalanceResource) {
		ServiceState.publish("haveBalanceResource"), ServiceState.publish("beforeLoadBalanceData");
		var a = new BalanceManager;
		a.getDataByCs(function() {
			ServiceState.publish("afterLoadBalanceData")
		}), ServiceState.publish("doingLoadBalanceData")
	} else ServiceState.publish("noBalanceResource")
}
function checkResourceTypeInfo() {
	var a = G.rc.defaults;
	a.rcId ? ServiceState.publish("haveDefaultResource") : ServiceState.publish("noDefaultResource"), a.rcId && a.rc.type == G.RC_IP ? ServiceState.publish("haveL3vpnDefaultResource") : ServiceState.publish("noL3vpnDefaultResource"), a.rcId && a.rc.type == G.RC_APP ? ServiceState.publish("haveTcpDefaultResource") : ServiceState.publish("noTcpDefaultResource"), a.rcId && a.rc.type == G.RC_WEB ? ServiceState.publish("haveWebDefaultResource") : ServiceState.publish("noWebDefaultResource"), is.empty(G.rc.tcp) ? ServiceState.publish("noTcpResource") : ServiceState.publish("haveTcpResource"), is.empty(G.rc.l3vpn) ? ServiceState.publish("noL3vpnResource") : ServiceState.publish("haveL3vpnResource"), is.empty(G.sso.data) && is.empty(G.sso.websso) ? ServiceState.publish("noSsoResource") : ServiceState.publish("haveSsoResource")
}
function checkLoginOtherPlace() {
	G.info.isReLogin ? (ServiceState.publish("reLogin"), ServiceState.publish("beforeReLoginSubmit"), showLoginOtherPlaceTips(G.info.lastLoginIp, G.info.lastLoginTime, function() {
		ServiceState.publish("afterReLoginSubmit")
	}), ServiceState.publish("doingReLoginSubmit")) : ServiceState.publish("notReLogin")
}
function checkFirstLogin() {
	checkReLogin({
		preventDefault : !0,
		otherLogin : function() {
			window.location = "/com/warning.html"
		},
		selfLogin : function() {
			ServiceState.publish("notFirstLogin")
		},
		notLogin : function() {
			ServiceState.publish("firstLogin")
		}
	})
}
function noticeStartService() {
	ServiceState.publish("beforeStartService"), ServiceState.publish("beforeNoticeStartService"), EcAgent("StartService", null, {
		success : function(a) {
			"1" === a.result && ServiceState.publish("afterNoticeStartService")
		}
	}), ServiceState.publish("doingNoticeStartService"), ServiceState.publish("doingStartService")
}
function queryL3vpnState(a) {
	function b() {
		reTryL3vpn >= 5 || setTimeout(function() {
			reTryL3vpn++, queryL3vpnState("L3VPN")
		}, 300)
	}
	EcAgent("DoQueryService", [ "QUERY QSTATE " + a ], {
		success : function(a) {
			a.result == G.server_state.STATUS_ALREADY_EXISTS || a.result == G.server_state.STATUS_START_SUCCESS ? a.result == G.server_state.STATUS_ALREADY_EXISTS ? (G.info.supportL3vpn = !1, ServiceState.publish("notSupportL3vpn"), reDispayRc()) : (G.info.supportL3vpn = !0, ServiceState.publish("supportL3vpn")) : a.result != G.server_state.STATUS_START_FAILED && b()
		},
		error : function() {
			b()
		}
	})
}
function queryServiceState(a) {
	function b() {
		var b = "QUERY QSTATE " + a;
		EcAgent("DoQueryService", [ b ], {
			success : function(a) {
				c(a.result)
			},
			error : function() {
				d()
			}
		})
	}
	function c(a) {
		switch (a) {
		case G.server_state.STATUS_LOGOUT:
			pageLogout();
			break;case G.server_state.STATUS_STARTING:
		case G.server_state.STATUS_INITING:
			d();
			break;case G.server_state.STATUS_STARTED:
		case G.server_state.STATUS_START_SUCCESS:
			g();
			break;case G.server_state.STATUS_START_FAILED:
			is.inside(ServiceState.currentStates, "onLogoutClick") || alert(tr("服务启动失败,建议关闭浏览器后重新登录!"));
			break;default:
			setTimeout(function() {
				g()
			}, 5e3)
		}
	}
	function d() {
		setTimeout(function() {
			b()
		}, h)
	}
	function e() {
		"ALLSERVICES" === a ? ServiceState.publish("beforeReadyQueryService") : "L3VPN" === a ? ServiceState.publish("beforeStartL3vpn") : "TCP" === a && ServiceState.publish("beforeStartTcp")
	}
	function f() {
		"ALLSERVICES" === a ? ServiceState.publish("doingReadyQueryService") : "L3VPN" === a ? ServiceState.publish("doingStartL3vpn") : "TCP" === a && ServiceState.publish("doingStartTcp")
	}
	function g() {
		"ALLSERVICES" === a ? ServiceState.publish("afterReadyQueryService") : "L3VPN" === a ? ServiceState.publish("afterStartL3vpn") : "TCP" === a && ServiceState.publish("afterStartTcp")
	}
	var h = 500;
	e(), b(), f()
}
function noticeEcAgentConnectClient() {
	ServiceState.publish("beforeNoticeEcAgentConnect"), EcAgent("StartService", null, {
		success : function(a) {
			"1" === a.result && ServiceState.publish("afterNoticeEcAgentConnect")
		}
	}), ServiceState.publish("doingNoticeEcAgentConnect")
}
function setConfigToClient() {
	ServiceState.publish("beforeSetConfigToClient");var a = 1,
		b = 2;
	EcAgent("doXmlConfigure", [ a ], {
		success : function(a) {
			"1" === a.result && EcAgent("doXmlConfigure", [ b ], {
				success : function(a) {
					"1" === a.result && ServiceState.publish("afterSetConfigToClient")
				}
			})
		}
	}), ServiceState.publish("doingSetConfigToClient")
}
function goDefaultResource() {
	goDefaultPage() && setTimeout(function() {
		ServiceState.publish("afterGoDefaultResource")
	}, 1e3)
}
function displayResource() {
	ServiceState.publish("beforeDisplayResource"), setTimeout(function() {
		displayRcs(), ServiceState.publish("afterDisplayResource")
	}, 50), ServiceState.publish("doingDisplayResource")
}
var G = G || {};
G.currentPage = "service", G.mask = G.mask || {}, G.mask.loading = null, G.mask.defaultGoing = null, G.mask.loggingOut = null, G.mask.opening = null, G.config = G.config || {}, G.config.raw = {}, G.config.enableSD = 0, G.config.remoteAppInSafeDesk = 0, G.config.enableSslTray = 0, G.config.autoStartClient = 0, G.config.enableAutoRelogin = 0, G.config.enableAutoLogin = 0, G.config.denyNormalAccess = 0, G.config.enableSecurityCheck = null, G.config.securityCheckInterval = null, G.config.isDisplayHost = null, G.config.securityStrategy = [], G.config.enableSecurityCheck = null, G.config.enableSCache = null, G.config.enableCsCompress = null, G.config.sslvpnNameFix = "", G.info = G.info || {}, G.info.loginName = "", G.info.isUseIeProxy = null, G.info.isHaveClient = null, G.info.isFromClient = null, G.info.isFirstLogin = null, G.info.isAutoOpen = null, G.info.lastLoginTime = null, G.info.showAccEffectLink = null, G.info.supportL3vpn = !0, G.info.sfFakeURLFlag = "/safeurl", G.info.pageHref = window.location.href, G.info.msgSSOClientPrj = [ "启动应用程序失败,请联系管理检查配置", "SSL VPN 单点登录提示", "无法连接主机,请联系管理员检查配置", "启动应用程序失败,请联系管理员检查配置", "SANGFOR SSL VPN 单点登录--超时提示", "浏览器设置无法使用单点登录:\n请在 '工具->Internet选项->高级->启用第三方浏览器扩展' 前打勾并重新登录!", "单点登录处理程序或网页", "超时" ].join("|"), G.info.haveBalanceResource = 0, G.info.balanceRequest = !1, G.rc = {
	raw : {},
	rcs : [],
	rcsHash : [],
	defaults : {
		rcId : null,
		groupId : -1e3,
		rc : {},
		group : {}
	},
	web : [],
	tcp : [],
	l3vpn : [],
	remoteApp : [],
	easyLinkHash : [],
	userBind : [],
	fileLock : [],
	unAuth : [],
	groups : [],
	groupsHash : [],
	groupRcs : [],
	secSD : [],
	config : {},
	other : {}
}, G.sso = {
	raw : {},
	data : [],
	obj : null,
	config : {
		enable : null,
		show_ssoconf : null,
		show_perssoconf : null,
		ssotimeout : null
	}
}, G.sso.info = {
	cert : null,
	username : null,
	userpwd : null,
	phone_num : null,
	group_name : null,
	scert_info : null,
	scert_sn : null,
	scert_thum : null,
	dkey_id : null
}, G.websso = G.websso || [], requireCss("/com/css/setting_window.css");
var XNewWindow = function(a) {
	var b = XWindow._randNum++;
	this.elId = {
		titleId : "xwinow_title" + b,
		contentId : "xwinow_content" + b,
		iframeId : "xwinow_iframe" + b,
		closeBtnId : "xwinow_close" + b,
		footId : "xwinow_foot" + b,
		contentPanelId : "xwinow_content_panel" + b
	}, this.cfg = {
		title : "",
		closefn : new Function
	}, extend(this.cfg, a), this.init()
};
XNewWindow.prototype = {
	init : function() {
		if (this.cfg.model) {
			this.mask = create("div");
			var a = Math.max(pageHeight(), windowHeight()),
				b = this.cfg.maskColor || "#ffffff",
				c = this.cfg.opacity || 70,
				d = {
					width : pageWidth() + "px",
					height : a + "px",
					display : "none",
					position : "absolute",
					zIndex : XWindow._randNum++,
					backgroundColor : b,
					left : "0px",
					top : "0px"
				};
			document.body.appendChild(this.mask), applyStyle(this.mask, d), setOpacity(this.mask, c)
		}
		this.el = createEl("<div class='xnewwindow_el'></div>"), this.el.innerHTML = [ format("<div id='{0}' class='xnewwindow_head'>", this.elId.titleId), format("<a id='{0}' title='" + tr("关闭") + "'  class='xnewwindow_close'></a>", this.elId.closeBtnId), "</div>", "<div class='xnewwindow_el_inner'>", "<div class='xnewwindow_content_wraper' id='" + this.elId.contentPanelId + "'>", "<div id='" + this.elId.contentId + "' class='xnewwindow_body'></div>", format("<div id='{0}' class='xnewwindow_foot'></div>", this.elId.footId), "</div>", "</div>" ].join(""), document.body.appendChild(this.el);
		var e = {
			width : this.cfg.width + "px",
			position : "absolute",
			zIndex : XWindow._randNum++,
			display : "none",
			left : "0px",
			top : "0px",
			textAlign : "left",
			height : "auto" == this.cfg.height ? this.cfg.height : this.cfg.height + "px"
		};
		applyStyle(this.el, e);
		var f = $ID(this.elId.footId);
		f.style.display = this.cfg.url ? "none" : "block", this.cfg.url ? this.setUrl(this.cfg.url) : this.setContent(this.cfg.content), this.setButtons(this.cfg.buttons);
		var g = this;
		this.reSize();
		var h = this.calPosition();
		applyStyle(this.el, {
			left : h.left + "px",
			top : h.top + "px"
		}), $ID(this.elId.closeBtnId).onclick = function() {
			g.hide(), g.cfg.closefn()
		};
		var i = function() {
			g.el && "none" != g.el.style && g.reSize()
		};
		addEvent(window, "resize", i), Drag.init({
			handler : $ID(this.elId.titleId),
			root : this.el,
			onDragStart : function() {
				var a = $ID(g.elId.contentPanelId);
				a.style.visibility = "hidden"
			},
			onDragEnd : function() {
				var a = $ID(g.elId.contentPanelId);
				a.style.visibility = "visible"
			}
		})
	},
	setUrl : function(a) {
		if (this.iframe)
			this.iframe.src = a;else {
			this.iframe = create("iframe"), this.iframe.src = a, this.iframe.frameBorder = 0, this.iframe.width = "100%", this.iframe.style.height = this.cfg.height - 34 + "px";
			var b = $ID(this.elId.contentId);
			b.innerHTML = "", b.appendChild(this.iframe)
		}
	},
	setContent : function(a) {
		var b = $ID(this.elId.contentId);
		html(b, a)
	},
	setButtons : function(a) {
		if ("undefined" != typeof a) {
			var b = $ID(this.elId.footId),
				c = this;
			a.forEach(function(a) {
				var d;
				d = createEl("<input type='button' />"), d.value = a.text, d.onclick = function() {
					a.handler && a.handler(c)
				}, b.appendChild(d)
			})
		}
	},
	hide : function() {
		this.el.style.display = "none", this.cfg.model && (this.mask.style.display = "none")
	},
	show : function() {
		this.isRender && this.reSize(), this.el.style.display = "", this.cfg.model && (this.mask.style.display = ""), this.isRender = !0
	},
	reSize : function() {
		if (this.mask) {
			var a = Math.max(pageHeight(), windowHeight());
			applyStyle(this.mask, {
				width : pageWidth() + "px",
				height : a + "px"
			})
		}
		var b = this.calPosition();
		applyStyle(this.el, {
			left : b.left + "px",
			top : b.top + "px"
		})
	},
	calPosition : function() {
		var a = fullHeight(this.el),
			b = parseInt((windowWidth() - this.cfg.width) / 2, 10) + xscrollX(),
			c = parseInt((windowHeight() - a) / 2, 10),
			d = (c > 0 ? c : 0) + xscrollY();
		return {
			left : b,
			top : d
		}
	}
}, Drag = {
	obj : null,
	init : function(a) {
		a.handler.onmousedown = this.start, a.handler.root = a.root || a.handler, a.handler.root.onDragStart = a.onDragStart || new Function, a.handler.root.onDrag = a.onDrag || new Function, a.handler.root.onDragEnd = a.onDragEnd || new Function
	},
	start : function(a) {
		var b = Drag.obj = this;
		b.style.cursor = "move", a = a || Drag.fixEvent(window.event);
		var c = a.pageX,
			d = a.pageY;
		b.lastMouseX = c, b.lastMouseY = d;
		var e = b.root.offsetLeft,
			f = b.root.style.top ? parseInt(b.root.style.top) : 0;
		b.root.style.left = e + "px", document.onmouseup = Drag.end, document.onmousemove = Drag.drag, b.root.onDragStart(e, f)
	},
	drag : function(a) {
		a = a || Drag.fixEvent(window.event);
		var b = a.pageX,
			c = a.pageY,
			d = Drag.obj.root,
			e = d.style.left ? parseInt(d.style.left) : 0,
			f = d.style.top ? parseInt(d.style.top) : 0,
			g = b - Drag.obj.lastMouseX + e,
			h = c - Drag.obj.lastMouseY + f;
		g = g > 0 ? g : 0, h = h > 0 ? h : 0, g = g < document.body.clientWidth - 20 ? g : document.body.clientWidth - 20, h = h < document.body.clientHeight - 20 ? h : document.body.clientHeight - 20, d.style.left = g + "px", d.style.top = h + "px", Drag.obj.root.onDrag(g, h), Drag.obj.lastMouseX = b, Drag.obj.lastMouseY = c
	},
	end : function() {
		var a = Drag.obj.root.style.left ? parseInt(Drag.obj.root.style.left) : 0,
			b = Drag.obj.root.style.top ? parseInt(Drag.obj.root.style.top) : 0;
		Drag.obj.root.onDrag(a, b), Drag.obj.root.onDragEnd(), document.onmousemove = null, document.onmouseup = null, Drag.obj = null
	},
	fixEvent : function(a) {
		return a.pageX = a.clientX + document.documentElement.scrollLeft, a.pageY = a.clientY + document.documentElement.scrollTop, a
	},
	guid : 1,
	css : function(a, b, c) {
		if (c && (a.style[b] = c), a.style[b]) return a.style[b];
		if (a.currentStyle) return a.currentStyle[b];
		if (document.defaultView && document.defaultView.getComputedStyle) {
			b = b.replace(/([A-Z])/g, "-$1"), b = b.toLowerCase();
			var d = document.defaultView.getComputedStyle(a, "");
			return d && d.getPropertyValue(b)
		}
		return null
	}
};
var TipPanel = function() {
	var a,
		b,
		c,
		d = 300,
		e = 16,
		f = 5,
		g = 3,
		h = 1,
		i = 31;
	return {
		init : function() {
			return a || (a = document.createElement("div"), a.className = "tippanel", a.style.display = "none", a.innerHTML = [ '<div class="arrow"></div>', '<div class="tippanel-inner">', '<div class="tippanel-content"></div>', "</div>" ].join(""), b = a.lastChild.firstChild, c = a.firstChild, document.body.appendChild(a), addEvent("rcsDisplayID", "click", function(a) {
					var b,
						c,
						d = a.target || a.srcElement,
						e = d;
					if (d && "IMG" === d.tagName && d.parentNode && "A" === d.parentNode.tagName && (d = d.parentNode), d && "A" === d.tagName && d.getAttribute("rcid")) {
						if (b = getRcById(d.getAttribute("rcid")), 0 == b.authorization || b.type == G.RC_WEB) return;
						if (b.type == G.RC_IP && G.info.isUseIeProxy) return;
						c = buildIpList(b, !1), c.length > 1 && TipPanel.show(e, b, c)
					}
				}), addEvent(document, "mousedown", function(b) {
					if (a && "none" !== a.style.display) {
						for (var c = b.target || b.srcElement, d = !1, e = c, f = 0, g = 6; g >= f && e; f++) {
							if (e === a) {
								d = !0;break
							}
							e = e.parentNode
						}
						d || TipPanel.hide()
					}
				}), $ID("framework_c_r") && addEvent($ID("framework_c_r"), "scroll", function() {
					a && "none" !== a.style.display && TipPanel.hide()
				})), a
		},
		show : function(j, k, l) {
			var m = pageHeight(),
				n = pageX(j),
				o = pageY(j),
				p = j.offsetWidth;
			b.innerHTML = TipPanel.getMessage(l), b.style.width = d + "px", c.style.height = "30px", a.style.top = "-1000px", a.style.left = n + p + f + "px", a.style.display = "block", c.style.height = b.offsetHeight + "px", a.offsetHeight + o > m ? (a.style.top = o - a.offsetHeight + i + h + "px", c.style.backgroundPosition = "0px " + (b.offsetHeight - i + g) + "px") : (a.style.top = o - e + "px", c.style.backgroundPosition = "0px 0px")
		},
		hide : function() {
			a.style.display = "none"
		},
		getMessage : function(a) {
			var b = [ '<div class="tip_c">', "<p>", tr("资源地址"), "</p>" ];
			return b.push("<ul>"), b.push(a.join("")), b.push("</ul>"), b.push("<span>", tr("(打开您的浏览器/应用程序，以访问以上网络资源)"), "</span>"), b.push("</div>"), b.join("")
		}
	}
}();
BalanceManager.prototype = {
	currentState : "done",
	parseData : function(a) {
		var b = {};
		return a.forEach(function(a, c) {
				if (a && a.BalancerUpdateRc) {
					var d = a.BalancerUpdateRc.Rc,
						e = a.BalancerUpdateRc.Sso,
						f = a.BalancerUpdateRc.webssoinfo;
					if (d) {
						var g = {
							rc : d,
							sso : null,
							websso : null
						};
						if (e && "" != e.data) {
							var h = e.data.split(":");
							h[1] && (g.sso = h[1])
						}
						f && (f.args = f.args.length ? f.args : [ f.args ], f.args.forEach(function(a, b) {
							a.value = htmlDecode(a.value)
						}), g.websso = f), b[d.id] = g
					}
				}
			}), b
	},
	getDataByWeb : function(a, b) {
		var c = this;
		c.changed = !1, EcAgent("doConfigure", [ "CONF RCBALANCE", a ], {
			success : function(a) {
				a && c.refresh(c.parseData([ a ])), b()
			},
			error : function(a) {
				b()
			}
		})
	},
	getDataByCs : function(a) {
		var b = {},
			c = this;
		EcAgent("DoQueryService", [ "QUERY QRCBALANCE" ], {
			success : function(d) {
				d && is.array(d.data) && d.data.length > 0 && (b = c.parseData(d.data)), c.cache = b, c.refresh(c.cache), is.fn(a) && a()
			}
		})
	},
	getNewRcDataCount : function(a) {
		var b = 0;
		for (var c in a) "serialize" != c && b++;
		return b
	},
	refresh : function(a) {
		this.changed = !1, 0 != this.getNewRcDataCount(a) && (this.changed = !0, this.currentState = "refresh", this.refreshWebSso(a), this.refreshRc(a), this.currentState = "done")
	},
	refreshWebSso : function(a) {
		for (var b = {}, c = 0; c < G.websso.length; c++) {
			var d = G.websso[c],
				e = a[d.rcid];
			e && (b[d.rcid] = !0, null == e.websso ? G.websso.splice(c--, 1) : G.websso[c] = e.websso)
		}
		for (var f in a) "serialize" != f && !b[f] && a[f].websso && (G.websso[G.websso.length] = a[f].websso)
	},
	refreshSso : function(a) {
		var b = {},
			c = null;
		if (G.sso.data.length) {
			var d = G.sso.data;
			for (var e in d) "serialize" != e && (newRc = a[e], newRc && (b[e] = !0, null == newRc.sso ?
					delete d[e]
					: (c = newRc.sso.split(":"), d[e] = {
						data : c[0]
					}, void 0 != c[1] && "" != c[1] && (d[e].mark = c[1]))))
		}
		for (var f in a) "serialize" != f && !b[f] && a[f].sso && (G.sso.data = G.sso.data || [], c = a[f].sso.split(":"), G.sso.data[f] = {
				data : c[0]
			}, void 0 != c[1] && "" != c[1] && (G.sso.data[f].mark = c[1]))
	},
	deleteRc : function(a, b) {
		delete a[b]
	},
	updateRc : function(a, b, c) {
		a[b] ? a[b] = c : (G.rc.web[b] ? this.deleteRc(G.rc.web, b) : G.rc.tcp[b] ? this.deleteRc(G.rc.tcp, b) : G.rc.l3vpn[b] && this.deleteRc(G.rc.l3vpn, b), a[b] = c)
	},
	refreshRc : function(a) {
		for (var b in a)
			if ("serialize" != b) {
				var c = a[b].rc,
					d = c.id;
				handleXmlRc(c), G.rc.rcsHash[d] = c, c.type == G.RC_WEB ? this.updateRc(G.rc.web, d, c) : c.type == G.RC_APP ? this.updateRc(G.rc.tcp, d, c) : c.type == G.RC_IP && this.updateRc(G.rc.l3vpn, d, c)
		}
	}
};
var ssoErrArray = [ "success", "", tr("没有初始化 "), tr("未知原因的失败操作 "), tr("初始化失败 "), tr("配置数据不正确 "), tr("没有找到应用程序 "), tr("不正确的WEB地址 ") ],
	JSssoform = function() {
		this.formHandler = null, this.formMethod = "post", this.formAction = "", this.formInputs = [], this.formTarget = "_blank", this.setFormtarget = function(a) {
			this.formTarget = a
		}, this.resetForm = function() {
			this.formInputs = []
		}, this.appendInput = function(a, b) {
			this.formInputs[this.formInputs.length] = {
				name : a,
				value : b
			}
		}, this.setFormaction = function(a) {
			this.formAction = a
		}, this.setFormmethod = function(a) {
			this.formMethod = a
		}, this.createForm = function(a) {
			var b = (a || document).createElement("form");
			return b.acceptCharset = "utf-8", b.action = this.formAction, b.method = this.formMethod, b.target = this.formTarget, b.onsubmit = "document.charset='utf-8';", b
		}, this.buildForm = function() {
			var a,
				b = document;
			for (G.rc.openResourceWin && (b = G.rc.openResourceWin.document), a = b.getElementById("webssoinputs"); a.childNodes.length;) a.removeChild(a.firstChild);
			var c = this.createForm(b);
			c.id = "webssoform";
			for (var d = 0; d < this.formInputs.length; d++) {
				var e = b.createElement("input");
				e.type = "hidden", e.name = this.formInputs[d].name, e.value = sf_get_value(this.formInputs[d].value), c.appendChild(e)
			}
			a.appendChild(c), this.formHandler = c
		}, this.submitForm = function() {
			null != this.formHandler && this.formHandler.submit()
		}
	},
	SF_g_ssoform = new JSssoform,
	NONE_SSO = 0,
	ASS_SSO = 1,
	ARG_SSO_UTF8GET = 2,
	ARG_SSO_UTF8POST = 3,
	ARG_SSO_GBKGET = 4,
	ARG_SSO_GBKPOST = 5,
	ARG_SSO_GBKCOOKIE = 6,
	ARG_SSO_UTF8COOKIE = 7,
	ARG_SSO_FIRESHARE = 8,
	ServiceState = ServiceState || new StateManager;
ServiceState.subscribe([ "jsLoad" ]).callback(function() {
	initEcAgentAfterLogin()
}), ServiceState.subscribe([ "afterInitEcAgent" ]).callback(function() {
	initGlobal(), initServiceCookie(), syncLogin(), syncServerAddress()
}), ServiceState.subscribe([ "onload" ]).callback(function() {
	initInterfaceOnload(), initNewTemplate(), showLoadingMask()
}), ServiceState.subscribe([ "afterSyncLogin" ]).callback(function() {
	syncLangInfo(), checkIeProxyState()
}), ServiceState.subscribe([ "haveIeProxy" ]).callback(function() {
	testProxyServer()
}), ServiceState.subscribe([ "afterSyncLanguage", "afterCheckIeProxy", "notFromClient", "firstLogin", "afterSyncServerAddress" ]).callback(function() {
	checkUpdateAfterLogin()
}), ServiceState.subscribe([ "afterSyncLanguage", "noIeProxy" ]).subscribe([ "afterSyncLanguage", "afterTestProxy" ]).callback(function() {
	loadConfigData(), loadResourceData()
}), ServiceState.subscribe([ "afterUpdate" ]).callback(function() {
	setConfigToClient()
}), ServiceState.subscribe([ "afterUpdate" ]).subscribe([ "notFirstLogin", "afterSyncLogin" ]).subscribe([ "fromClient", "afterSyncLogin" ]).callback(function() {
	syncBrowserType(), syncServerAddress()
}), ServiceState.subscribe([ "afterLoadConfigData", "afterLoadResourceData" ]).callback(function() {
	checkNeedClient(), initInfoData(), initSsoData(), loadBalanceData(), checkLoginOtherPlace(), checkOutOfDate(), checkFirstLogin(), checkResourceTypeInfo(), setDataToCookie(), initLinkDisplay()
}), ServiceState.subscribe([ "noTcpResource", "noTcpDefaultResource", "noL3vpnResource", "noL3vpnDefaultResource", "noSecurityCheck", "notNeedClient" ]).callback(function() {
	ServiceState.publish("notNeedService")
}), ServiceState.subscribe([ "haveTcpResource" ]).subscribe([ "haveTcpDefaultResource" ]).subscribe([ "haveL3vpnResource" ]).subscribe([ "haveL3vpnDefaultResource" ]).subscribe([ "needClient" ]).callback(function() {
	ServiceState.publish("needService")
}), ServiceState.subscribe([ "needService" ]).callback(function() {
	G.info.isHaveClient = !0, initAccEffectLink()
}), ServiceState.subscribe([ "firstLogin", "notFromClient", "needService", "afterSetConfigToClient", "afterUpdate" ]).callback(function() {
	noticeStartService()
}), ServiceState.subscribe([ "haveL3vpnResource", "afterNoticeStartService" ]).subscribe([ "haveL3vpnResource", "fromClient" ]).subscribe([ "notFirstLogin" ]).callback(function() {
	queryL3vpnState("L3VPN")
}), ServiceState.subscribe([ "afterNoticeStartService" ]).callback(function() {
	queryServiceState("ALLSERVICES")
}), ServiceState.subscribe([ "haveSecurityCheck", "afterReadyQueryService" ]).subscribe([ "haveSecurityCheck", "finishStartService" ]).callback(function() {
	Watcher.watchAuthorization()
}), ServiceState.subscribe([ "afterReadyQueryService", "haveTcpResource" ]).subscribe([ "afterReadyQueryService", "haveTcpDefaultResource" ]).callback(function() {
	queryServiceState("TCP")
}), ServiceState.subscribe([ "afterReadyQueryService", "haveL3vpnResource" ]).subscribe([ "afterReadyQueryService", "haveL3vpnDefaultResource" ]).subscribe([ "fromClient", "autoOpen", "haveL3vpnDefaultResource" ]).subscribe([ "fromClient", "autoOpen", "haveL3vpnResource" ]).callback(function() {
	queryServiceState("L3VPN")
}), ServiceState.subscribe([ "afterStartTcp", "afterStartL3vpn" ]).subscribe([ "noL3vpnResource", "noL3vpnDefaultResource", "afterStartTcp" ]).subscribe([ "noTcpResource", "noTcpDefaultResource", "afterStartL3vpn" ]).callback(function() {
	ServiceState.publish("afterStartService")
}), ServiceState.subscribe([ "afterStartService" ]).subscribe([ "noL3vpnResource", "noL3vpnDefaultResource", "noTcpResource", "noTcpDefaultResource", "afterReadyQueryService" ]).subscribe([ "notNeedService" ]).subscribe([ "fromClient", "notAutoOpen" ]).subscribe([ "fromClient", "autoOpen", "noL3vpnDefaultResource" ]).subscribe([ "fromClient", "autoOpen", "haveL3vpnDefaultResource", "afterStartL3vpn" ]).subscribe([ "fromClient", "autoOpen", "haveL3vpnResource", "afterStartL3vpn" ]).subscribe([ "notFirstLogin" ]).callback(function() {
	ServiceState.publish("finishStartService")
}), ServiceState.subscribe([ "notReLogin" ]).subscribe([ "afterReLoginSubmit" ]).callback(function() {
	ServiceState.publish("finishReLoginCheck")
}), ServiceState.subscribe([ "afterUpdateAuthorization" ]).subscribe([ "noSecurityCheck" ]).callback(function() {
	ServiceState.publish("finishSecurityCheck")
}), ServiceState.subscribe([ "noSsoResource" ]).subscribe([ "afterInitSso" ]).callback(function() {
	ServiceState.publish("finishInitSso")
}), ServiceState.subscribe([ "noBalanceResource" ]).subscribe([ "afterLoadBalanceData" ]).callback(function() {
	ServiceState.publish("finishLoadBalanceData")
}), ServiceState.subscribe([ "fromClient", "needService" ]).subscribe([ "notFirstLogin", "needService" ]).callback(function() {
	noticeEcAgentConnectClient()
}), ServiceState.subscribe([ "afterReadyQueryService" ]).subscribe([ "finishStartService" ]).callback(function() {
	syncCertInfo()
}), ServiceState.subscribe([ "afterReadyQueryService" ]).callback(function() {
	setSourceUrlToClient()
}), ServiceState.subscribe([ "notNeedService" ]).callback(function() {
	Watcher.watchSesseionSwitch()
}), ServiceState.subscribe([ "needService", "finishStartService" ]).callback(function() {
	Watcher.watchClientLogout()
}), ServiceState.subscribe([ "haveSsoResource", "notNeedService" ]).subscribe([ "haveSsoResource", "finishStartService" ]).callback(function() {
	initSso()
}), ServiceState.subscribe([ "onload", "doingStartService", "finishLoadBalanceData", "finishSecurityCheck" ]).subscribe([ "onload", "afterLoadConfigData", "afterLoadResourceData", "finishLoadBalanceData", "finishStartService", "finishSecurityCheck" ]).callback(function() {
	displayResource(), showMainInterface()
}), ServiceState.subscribe([ "haveSecurityCheck", "afterDisplayResource" ]).callback(function() {
	ServiceState.subscribe([ "afterUpdateAuthorization" ]).callback(function() {
		displayResource()
	}, 0)
}), ServiceState.subscribe([ "afterDisplayResource" ]).callback(function() {
	initRcInterface()
}, 0), ServiceState.subscribe([ "firstLogin", "haveDefaultResource" ]).subscribe([ "autoOpen", "haveDefaultResource" ]).callback(function() {
	ServiceState.publish("needGoDefaultResource")
}), ServiceState.subscribe([ "notFirstLogin", "notAutoOpen" ]).subscribe([ "noDefaultResource" ]).callback(function() {
	ServiceState.publish("notNeedGoDefaultResource")
}), ServiceState.subscribe([ "onload", "needGoDefaultResource", "finishReLoginCheck", "finishSecurityCheck", "finishInitSso", "afterSyncCert", "afterSyncBrowserType", "afterSyncServerAddress" ]).callback(function() {
	ServiceState.publish("readyGoDefaultResource")
}), ServiceState.subscribe([ "needGoDefaultResource", "afterReadyQueryService", "haveL3vpnDefaultResource", "notSupportL3vpn" ]).subscribe([ "fromClient", "autoOpen", "haveL3vpnDefaultResource", "doingStartL3vpn", "notSupportL3vpn" ]).callback(function() {
	hideLoadingMask()
}), ServiceState.subscribe([ "needGoDefaultResource", "afterReadyQueryService", "haveL3vpnDefaultResource", "supportL3vpn" ]).subscribe([ "needGoDefaultResource", "afterReadyQueryService", "haveTcpDefaultResource" ]).subscribe([ "fromClient", "autoOpen", "haveL3vpnDefaultResource", "supportL3vpn", "doingStartL3vpn" ]).subscribe([ "doingGoDefaultResource" ]).callback(function() {
	hideLoadingMask(), showGoDefaultMask()
}), ServiceState.subscribe([ "readyGoDefaultResource", "haveTcpDefaultResource", "notChromeBrowser", "afterStartTcp" ]).subscribe([ "readyGoDefaultResource", "haveTcpDefaultResource", "haveL3vpnDefaultResource", "chromeBrowser", "afterStartL3vpn" ]).subscribe([ "readyGoDefaultResource", "haveTcpDefaultResource", "haveL3vpnResource", "chromeBrowser", "afterStartL3vpn" ]).subscribe([ "readyGoDefaultResource", "haveL3vpnDefaultResource", "afterStartL3vpn" ]).subscribe([ "readyGoDefaultResource", "notChromeBrowser", "haveWebDefaultResource" ]).subscribe([ "readyGoDefaultResource", "haveWebDefaultResource", "haveL3vpnDefaultResource", "chromeBrowser", "afterStartL3vpn" ]).subscribe([ "readyGoDefaultResource", "haveWebDefaultResource", "haveL3vpnResource", "chromeBrowser", "afterStartL3vpn" ]).subscribe([ "readyGoDefaultResource", "noL3vpnDefaultResource", "finishStartService" ]).callback(function() {
	goDefaultResource()
}), ServiceState.subscribe([ "onload", "notNeedGoDefaultResource", "finishReLoginCheck", "finishStartService", "noSsoResource" ]).subscribe([ "onload", "notNeedGoDefaultResource", "finishReLoginCheck", "finishStartService", "afterInitSso" ]).subscribe([ "afterGoDefaultResource", "noSsoResource", "supportL3vpn" ]).subscribe([ "afterGoDefaultResource", "afterInitSso", "supportL3vpn" ]).callback(function() {
	hideLoadingMask(), hideGoDefaultMask()
}), ServiceState.subscribe([ "notNeedGoDefaultResource", "afterDisplayResource" ]).callback(function() {
	hideLoadingMask()
}), ServiceState.subscribe([ "afterClientLogout" ]).callback(function() {
	pageLogout()
}), ServiceState.subscribe([ "onLogoutClick", "needService" ]).callback(function() {
	clientLogout(), showLoggingOutMask()
}), ServiceState.subscribe([ "onLogoutClick", "notNeedService" ]).callback(function() {
	pageLogout()
}), document.body ? ServiceState.publish("onload") : addEvent(window, "load", function() {
	ServiceState.publish("onload")
});
var Watcher = {
		logoutDelay : 2e3,
		isWatchingClientLogout : !1,
		watchClientLogout : function() {
			function a() {
				var a = getCookie("TWFID");
				return a ? void EcAgent("DoQueryService", [ "QUERY LOGOUT" ], {
					success : function(a) {
						f = 0, a.result === h.logout ? ServiceState.publish("afterClientLogout") : a.result === h.sessionSwitched ? (b(), e(Watcher.logoutDelay)) : e(Watcher.logoutDelay)
					},
					error : function() {
						f >= 3 ? pageLogout() : (f++, e(Watcher.logoutDelay))
					}
				}) : void pageLogout()
			}
			function b() {
				g || (setTimeout(function() {
					d(), g = !1
				}, 3e3), g = !0)
			}
			function c() {
				Watcher.setSessionToClient()
			}
			function d() {
				function a() {
					b >= 3 || setTimeout(function() {
						b++, d()
					}, 300)
				}
				var b = 3;
				EcAgent("DoQueryService", [ "QUERY QSESSIONID" ], {
					success : function(d) {
						var e = d.result.trim();
						e && "-1" !== e ? e && (b = 0, setCookie("TWFID", e)) : (c(), a())
					},
					error : function() {
						a()
					}
				})
			}
			function e(b) {
				setTimeout(function() {
					a()
				}, b)
			}
			var f = 0,
				g = !1,
				h = {
					online : "0",
					logout : "1",
					sessionSwitched : "2",
					alreadyExist : "-1"
				};
			a(), Watcher.isWatchingClientLogout = !0
		},
		watchSesseionSwitch : function() {
			function a() {
				var a = "Anonymous" == G.info.loginName ? "opt=updatesession" : "",
					c = "/por/timequery.csp";
				ajax(c, {
					data : a,
					cache : !1,
					success : function(a) {
						var c,
							e = (a || "").trim().toLowerCase(),
							g = f.slow,
							h = /externsession#oldsessid=([^#]+)/;
						if (h.test(e)) c = e.replace(h, "$1"), d(c);else {
							if (0 >= e) return logout(), !1;
							30 >= e && (g = f.middle)
						}
						b(g)
					},
					error : function(a, b) {
						return 403 === b ? (logout(), !1) : void e()
					}
				})
			}
			function b(b) {
				setTimeout(function() {
					a()
				}, b)
			}
			function c(a) {
				var b = "/por/timequery.csp";
				ajax(b, {
					type : "GET",
					data : {
						msg : "logout",
						oldsessid : a
					},
					cache : !1,
					success : function(b) {
						"logout=done" == b ? i = 0 : (i++, 3 >= i && c(a))
					}
				})
			}
			function d(a) {
				c(a), Watcher.setSessionToClient(a)
			}
			function e() {
				var a;
				h++, h > 3 && g && !G.config.enableAutoRelogin && (g = confirm(tr("无法更新在线时间,可能是网络连接错误! 下次出错时继续提示请点击&quot;确定&quot;"))), a = 3 >= h ? f.fast : f.slow, b(a)
			}
			var f = {
					slow : 3e4,
					middle : 1e4,
					fast : 5e3
				},
				g = !0,
				h = 0,
				i = 0;
			a()
		},
		setSessionToClient : function(a) {
			var b = getCookie("TWFID");
			a = a || b, EcAgent("DoConfigure", [ "SET TWFID " + b ], {
				session : a,
				success : function(a) {
					"1" === a.result
				}
			})
		},
		watchAuthorization : function() {
			function a() {
				ServiceState.publish("beforeUpdateAuthorization"), EcAgent("DoQueryService", [ "QUERY QDISABLE" ], {
					success : function(a) {
						a.result && updateAuthorizationData(a.result), ServiceState.publish("afterUpdateAuthorization")
					},
					error : function() {
						b()
					}
				}), ServiceState.publish("doingUpdateAuthorization")
			}
			function b() {
				c > 5 || setTimeout(function() {
					c++, a()
				}, 300)
			}
			if (!G.config.enableSecurityCheck) return ServiceState.publish("afterUpdateAuthorization"), !1;
			a(), G.config.securityCheckInterval && setInterval(function() {
				a()
			}, 6e4 * G.config.securityCheckInterval);
			var c = 0
		}
	},
	reTryL3vpn = 0;
G.debug && "unit" === G.debug || ServiceState.publish("jsLoad");